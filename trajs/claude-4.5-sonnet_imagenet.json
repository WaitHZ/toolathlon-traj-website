{"pass": true, "messages": [{"role": "user", "content": "I am a graduate student in computer vision, and I have several papers on image generation in my workspace. I need your help to summarize the experimental results of the models in these papers on ImageNet 256 and store the results in a LaTeX table. The table should include: Model Name (When multiple models are included, report the one with the lowest FID result in the paper.), Method Category (determine if it belongs to VAE, GAN, Diffusion, Flow-based, or AR), Model Parameters, FID-50K, and Inception Score. Finally, please save the results in survey.tex in my workspace (only the LaTeX table source code is needed), and the order of the table should be in descending order of FID. The example structure of the table is format.tex."}, {"role": "assistant", "content": "I'll help you summarize the experimental results from the papers in your workspace. Let me start by exploring the workspace to find the papers and the format file.", "tool_calls": [{"id": "toolu_01AESgQtVSKq7fZxSLr6AdKg", "type": "function", "function": {"name": "filesystem-list_directory", "arguments": "{\"path\": \"/workspace/dumps/workspace\"}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"[DIR] .pdf_tools_tempfiles\\n[FILE] 2212.09748v2.pdf\\n[FILE] 2406.06525v1.pdf\\n[FILE] format.tex\",\"annotations\":null}", "tool_call_id": "toolu_01AESgQtVSKq7fZxSLr6AdKg"}, {"role": "assistant", "content": "Good! I can see there are 2 PDF papers and a format.tex file. Let me first check the format file to understand the table structure you want.", "tool_calls": [{"id": "toolu_01U5UcnQVR1PuQydf2iNCikX", "type": "function", "function": {"name": "filesystem-read_file", "arguments": "{\"path\": \"/workspace/dumps/workspace/format.tex\"}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"\\\\begin{table}[!ht]\\n    \\\\centering\\n    \\\\begin{tabular}{ccccc}\\n        \\\\toprule\\n        Model & Class & \\\\#Param & FID-50K & Inception Score \\\\\\\\\\n        \\\\midrule\\n        A & GAN & 300M & 40.20 & 150.00 \\\\\\\\\\n        B & Diffusion & 2B & 20.20 & 190.00 \\\\\\\\\\n        \\\\bottomrule\\n    \\\\end{tabular}\\n\\\\end{table}\",\"annotations\":null}", "tool_call_id": "toolu_01U5UcnQVR1PuQydf2iNCikX"}, {"role": "assistant", "content": "Perfect! Now let me examine the PDF papers to extract the experimental results. Let me start by getting basic information about each PDF.", "tool_calls": [{"id": "toolu_01TDBdfgLEjB7WNG7XXfgNHC", "type": "function", "function": {"name": "pdf-tools-get_pdf_info", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\"}"}}, {"id": "toolu_011gXN4fUbEfsjEnEidCAn98", "type": "function", "function": {"name": "pdf-tools-get_pdf_info", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2406.06525v1.pdf\"}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF file information:\\nTotal pages: 25\\nTitle: \\nAuthor: \\nCreator: LaTeX with hyperref\\nCreation date: D:20230303012649Z\\n\",\"annotations\":null}", "tool_call_id": "toolu_01TDBdfgLEjB7WNG7XXfgNHC"}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF file information:\\nTotal pages: 26\\nTitle: \\nAuthor: \\nCreator: LaTeX with hyperref\\nCreation date: D:20240611014653Z\\n\",\"annotations\":null}", "tool_call_id": "toolu_011gXN4fUbEfsjEnEidCAn98"}, {"role": "assistant", "content": "Now let me read the first few pages of each paper to understand what they're about and find the experimental results on ImageNet 256.", "tool_calls": [{"id": "toolu_0152LHh2Ceoz6hiTuLALsr29", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"start_page\": 1, \"end_page\": 5}"}}, {"id": "toolu_01CJBS9fTTM9fRPxaEToHUoM", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2406.06525v1.pdf\", \"start_page\": 1, \"end_page\": 5}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 25\\nExtracted page range: 1-5\\n\\n=== Page 1 ===\\nScalable Diffusion Models with Transformers\\nWilliam Peebles*\\nUC BerkeleySaining Xie\\nNew York University\\nFigure 1. Diffusion models with transformer backbones achieve state-of-the-art image quality. We show selected samples from two\\nof our class-conditional DiT-XL/2 models trained on ImageNet at 512 \\u0002512 and 256\\u0002256 resolution, respectively.\\nAbstract\\nWe explore a new class of diffusion models based on the\\ntransformer architecture. We train latent diffusion models\\nof images, replacing the commonly-used U-Net backbone\\nwith a transformer that operates on latent patches. We an-\\nalyze the scalability of our Diffusion Transformers (DiTs)\\nthrough the lens of forward pass complexity as measured by\\nG\ufb02ops. We \ufb01nd that DiTs with higher G\ufb02ops\u2014through in-\\ncreased transformer depth/width or increased number of in-\\nput tokens\u2014consistently have lower FID. In addition to pos-\\nsessing good scalability properties, our largest DiT-XL/2\\nmodels outperform all prior diffusion models on the class-\\nconditional ImageNet 512 \\u0002512 and 256\\u0002256 benchmarks,\\nachieving a state-of-the-art FID of 2.27 on the latter.1. Introduction\\nMachine learning is experiencing a renaissance powered\\nby transformers. Over the past \ufb01ve years, neural architec-\\ntures for natural language processing [8, 42], vision [10]\\nand several other domains have largely been subsumed by\\ntransformers [60]. Many classes of image-level genera-\\ntive models remain holdouts to the trend, though\u2014while\\ntransformers see widespread use in autoregressive mod-\\nels [3,6,43,47], they have seen less adoption in other gener-\\native modeling frameworks. For example, diffusion models\\nhave been at the forefront of recent advances in image-level\\ngenerative models [9,46]; yet, they all adopt a convolutional\\nU-Net architecture as the de-facto choice of backbone.\\n*Work done during an internship at Meta AI, FAIR Team.\\nCode and project page available here.\\n1arXiv:2212.09748v2  [cs.CV]  2 Mar 2023\\n\\n=== Page 2 ===\\n520 80 320GflopsDiameterFigure 2. ImageNet generation with Diffusion Transformers (DiTs). Bubble area indicates the \ufb02ops of the diffusion model. Left:\\nFID-50K (lower is better) of our DiT models at 400K training iterations. Performance steadily improves in FID as model \ufb02ops increase.\\nRight: Our best model, DiT-XL/2, is compute-ef\ufb01cient and outperforms all prior U-Net-based diffusion models, like ADM and LDM.\\nThe seminal work of Ho et al. [19] \ufb01rst introduced the\\nU-Net backbone for diffusion models. Having initially seen\\nsuccess within pixel-level autoregressive models and con-\\nditional GANs [23], the U-Net was inherited from Pixel-\\nCNN++ [52, 58] with a few changes. The model is con-\\nvolutional, comprised primarily of ResNet [15] blocks. In\\ncontrast to the standard U-Net [49], additional spatial self-\\nattention blocks, which are essential components in trans-\\nformers, are interspersed at lower resolutions. Dhariwal and\\nNichol [9] ablated several architecture choices for the U-\\nNet, such as the use of adaptive normalization layers [40] to\\ninject conditional information and channel counts for con-\\nvolutional layers. However, the high-level design of the U-\\nNet from Ho et al. has largely remained intact.\\nWith this work, we aim to demystify the signi\ufb01cance of\\narchitectural choices in diffusion models and offer empiri-\\ncal baselines for future generative modeling research. We\\nshow that the U-Net inductive bias is notcrucial to the per-\\nformance of diffusion models, and they can be readily re-\\nplaced with standard designs such as transformers. As a\\nresult, diffusion models are well-poised to bene\ufb01t from the\\nrecent trend of architecture uni\ufb01cation\u2014e.g., by inheriting\\nbest practices and training recipes from other domains, as\\nwell as retaining favorable properties like scalability, ro-\\nbustness and ef\ufb01ciency. A standardized architecture would\\nalso open up new possibilities for cross-domain research.\\nIn this paper, we focus on a new class of diffusion models\\nbased on transformers. We call them Diffusion Transform-\\ners, or DiTs for short. DiTs adhere to the best practices of\\nVision Transformers (ViTs) [10], which have been shown to\\nscale more effectively for visual recognition than traditional\\nconvolutional networks (e.g., ResNet [15]).More speci\ufb01cally, we study the scaling behavior of trans-\\nformers with respect to network complexity vs. sample\\nquality . We show that by constructing and benchmark-\\ning the DiT design space under the Latent Diffusion Mod-\\nels(LDMs) [48] framework, where diffusion models are\\ntrained within a V AE\u2019s latent space, we can successfully\\nreplace the U-Net backbone with a transformer. We further\\nshow that DiTs are scalable architectures for diffusion mod-\\nels: there is a strong correlation between the network com-\\nplexity (measured by G\ufb02ops) vs. sample quality (measured\\nby FID). By simply scaling-up DiT and training an LDM\\nwith a high-capacity backbone (118.6 G\ufb02ops), we are able\\nto achieve a state-of-the-art result of 2.27 FID on the class-\\nconditional 256\\u0002256ImageNet generation benchmark.\\n2. Related Work\\nTransformers. Transformers [60] have replaced domain-\\nspeci\ufb01c architectures across language, vision [10], rein-\\nforcement learning [5, 25] and meta-learning [39]. They\\nhave shown remarkable scaling properties under increas-\\ning model size, training compute and data in the language\\ndomain [26], as generic autoregressive models [17] and\\nas ViTs [63]. Beyond language, transformers have been\\ntrained to autoregressively predict pixels [6, 7, 38]. They\\nhave also been trained on discrete codebooks [59] as both\\nautoregressive models [11,47] and masked generative mod-\\nels [4, 14]; the former has shown excellent scaling behavior\\nup to 20B parameters [62]. Finally, transformers have been\\nexplored in DDPMs to synthesize non-spatial data; e.g., to\\ngenerate CLIP image embeddings in DALL \\u0001E 2 [41,46]. In\\nthis paper, we study the scaling properties of transformers\\nwhen used as the backbone of diffusion models of images.\\n2\\n\\n=== Page 3 ===\\nMulti-Head Self-AttentionLayer NormScale, ShiftMLPPointwise FeedforwardLayer NormScale, ShiftScale++\\nScale\ud835\udefe!,\ud835\udefd!\ud835\udefc!\ud835\udefe\\\",\ud835\udefd\\\"\ud835\udefc\\\"\\nInput TokensConditioningDiTBlock with adaLN-ZeroLatent Diffusion TransformerTimestep \ud835\udc61Label \ud835\udc66DiTBlockN xPatchifyLayer NormLinear and ReshapeEmbedNoise\u03a332 x 32 x 432 x 32 x 4\\nNoised Latent32 x 32 x 4Multi-Head Self-AttentionLayer NormPointwise Feedforward\\nLayer Norm++\\nInput TokensConditioningDiTBlock with Cross-AttentionMulti-Head Cross-AttentionLayer Norm+Multi-Head Self-AttentionLayer NormPointwise Feedforward++\\nInput TokensConditioningDiTBlock with In-Context ConditioningLayer Norm\\nConcatenate on Sequence DimensionFigure 3. The Diffusion Transformer (DiT) architecture. Left: We train conditional latent DiT models. The input latent is decomposed\\ninto patches and processed by several DiT blocks. Right: Details of our DiT blocks. We experiment with variants of standard transformer\\nblocks that incorporate conditioning via adaptive layer norm, cross-attention and extra input tokens. Adaptive layer norm works best.\\nDenoising diffusion probabilistic models (DDPMs).\\nDiffusion [19, 54] and score-based generative models [22,\\n56] have been particularly successful as generative models\\nof images [35,46,48,50], in many cases outperforming gen-\\nerative adversarial networks (GANs) [12] which had previ-\\nously been state-of-the-art. Improvements in DDPMs over\\nthe past two years have largely been driven by improved\\nsampling techniques [19, 27, 55], most notably classi\ufb01er-\\nfree guidance [21], reformulating diffusion models to pre-\\ndict noise instead of pixels [19] and using cascaded DDPM\\npipelines where low-resolution base diffusion models are\\ntrained in parallel with upsamplers [9, 20]. For all the dif-\\nfusion models listed above, convolutional U-Nets [49] are\\nthe de-facto choice of backbone architecture. Concurrent\\nwork [24] introduced a novel, ef\ufb01cient architecture based\\non attention for DDPMs; we explore pure transformers.\\nArchitecture complexity. When evaluating architecture\\ncomplexity in the image generation literature, it is fairly\\ncommon practice to use parameter counts. In general, pa-\\nrameter counts can be poor proxies for the complexity of\\nimage models since they do not account for, e.g., image res-\\nolution which signi\ufb01cantly impacts performance [44, 45].\\nInstead, much of the model complexity analysis in this pa-\\nper is through the lens of theoretical G\ufb02ops. This brings us\\nin-line with the architecture design literature where G\ufb02ops\\nare widely-used to gauge complexity. In practice, the\\ngolden complexity metric is still up for debate as it fre-\\nquently depends on particular application scenarios. Nichol\\nand Dhariwal\u2019s seminal work improving diffusion mod-\\nels [9, 36] is most related to us\u2014there, they analyzed the\\nscalability and G\ufb02op properties of the U-Net architecture\\nclass. In this paper, we focus on the transformer class.3. Diffusion Transformers\\n3.1. Preliminaries\\nDiffusion formulation. Before introducing our architec-\\nture, we brie\ufb02y review some basic concepts needed to\\nunderstand diffusion models (DDPMs) [19, 54]. Gaus-\\nsian diffusion models assume a forward noising process\\nwhich gradually applies noise to real data x0:q(xtjx0) =\\nN(xt;p\\u0016\\u000btx0;(1\\u0000\\u0016\\u000bt)I), where constants \\u0016\\u000btare hyperpa-\\nrameters. By applying the reparameterization trick, we can\\nsamplext=p\\u0016\\u000btx0+p1\\u0000\\u0016\\u000bt\\u000ft, where\\u000ft\\u0018N(0;I).\\nDiffusion models are trained to learn the reverse process\\nthat inverts forward process corruptions: p\\u0012(xt\\u00001jxt) =\\nN(\\u0016\\u0012(xt);\\u0006\\u0012(xt)), where neural networks are used to pre-\\ndict the statistics of p\\u0012. The reverse process model is\\ntrained with the variational lower bound [30] of the log-\\nlikelihood of x0, which reduces to L(\\u0012) =\\u0000p(x0jx1) +P\\ntDKL(q\\u0003(xt\\u00001jxt;x0)jjp\\u0012(xt\\u00001jxt)), excluding an ad-\\nditional term irrelevant for training. Since both q\\u0003andp\\u0012\\nare Gaussian,DKLcan be evaluated with the mean and co-\\nvariance of the two distributions. By reparameterizing \\u0016\\u0012as\\na noise prediction network \\u000f\\u0012, the model can be trained us-\\ning simple mean-squared error between the predicted noise\\n\\u000f\\u0012(xt)and the ground truth sampled Gaussian noise \\u000ft:\\nLsimple (\\u0012) =jj\\u000f\\u0012(xt)\\u0000\\u000ftjj2\\n2. But, in order to train diffu-\\nsion models with a learned reverse process covariance \\u0006\\u0012,\\nthe fullDKLterm needs to be optimized. We follow Nichol\\nand Dhariwal\u2019s approach [36]: train \\u000f\\u0012withLsimple , and\\ntrain\\u0006\\u0012with the fullL. Oncep\\u0012is trained, new images can\\nbe sampled by initializing xtmax\\u0018 N (0;I)and sampling\\nxt\\u00001\\u0018p\\u0012(xt\\u00001jxt)via the reparameterization trick.\\n3\\n\\n=== Page 4 ===\\nClassi\ufb01er-free guidance. Conditional diffusion models\\ntake extra information as input, such as a class label c.\\nIn this case, the reverse process becomes p\\u0012(xt\\u00001jxt;c),\\nwhere\\u000f\\u0012and\\u0006\\u0012are conditioned on c. In this setting,\\nclassi\ufb01er-free guidance can be used to encourage the sam-\\npling procedure to \ufb01nd xsuch that logp(cjx)is high [21].\\nBy Bayes Rule, logp(cjx)/logp(xjc)\\u0000logp(x), and\\nhencerxlogp(cjx)/rxlogp(xjc)\\u0000rxlogp(x). By in-\\nterpreting the output of diffusion models as the score func-\\ntion, the DDPM sampling procedure can be guided to sam-\\nplexwith highp(xjc)by:^\\u000f\\u0012(xt;c) =\\u000f\\u0012(xt;;) +s\\u0001\\nrxlogp(xjc)/\\u000f\\u0012(xt;;)+s\\u0001(\\u000f\\u0012(xt;c)\\u0000\\u000f\\u0012(xt;;)), where\\ns>1indicates the scale of the guidance (note that s= 1re-\\ncovers standard sampling). Evaluating the diffusion model\\nwithc=;is done by randomly dropping out cduring\\ntraining and replacing it with a learned \u201cnull\u201d embedding\\n;. Classi\ufb01er-free guidance is widely-known to yield sig-\\nni\ufb01cantly improved samples over generic sampling tech-\\nniques [21, 35, 46], and the trend holds for our DiT models.\\nLatent diffusion models. Training diffusion models di-\\nrectly in high-resolution pixel space can be computationally\\nprohibitive. Latent diffusion models (LDMs) [48] tackle this\\nissue with a two-stage approach: (1) learn an autoencoder\\nthat compresses images into smaller spatial representations\\nwith a learned encoder E; (2) train a diffusion model of\\nrepresentations z=E(x)instead of a diffusion model of\\nimagesx(Eis frozen). New images can then be generated\\nby sampling a representation zfrom the diffusion model\\nand subsequently decoding it to an image with the learned\\ndecoderx=D(z).\\nAs shown in Figure 2, LDMs achieve good performance\\nwhile using a fraction of the G\ufb02ops of pixel space diffusion\\nmodels like ADM. Since we are concerned with compute\\nef\ufb01ciency, this makes them an appealing starting point for\\narchitecture exploration. In this paper, we apply DiTs to\\nlatent space, although they could be applied to pixel space\\nwithout modi\ufb01cation as well. This makes our image genera-\\ntion pipeline a hybrid-based approach; we use off-the-shelf\\nconvolutional V AEs and transformer-based DDPMs.\\n3.2. Diffusion Transformer Design Space\\nWe introduce Diffusion Transformers (DiTs), a new ar-\\nchitecture for diffusion models. We aim to be as faithful to\\nthe standard transformer architecture as possible to retain\\nits scaling properties. Since our focus is training DDPMs of\\nimages (speci\ufb01cally, spatial representations of images), DiT\\nis based on the Vision Transformer (ViT) architecture which\\noperates on sequences of patches [10]. DiT retains many of\\nthe best practices of ViTs. Figure 3 shows an overview of\\nthe complete DiT architecture. In this section, we describe\\nthe forward pass of DiT, as well as the components of the\\ndesign space of the DiT class.\\n\ud835\udc5d\ud835\udc3c\ud835\udc5d\ud835\udc3c\ud835\udc47=\ud835\udc3c/\ud835\udc5d!Noised LatentI\u00d7I\u00d7CInput Tokens T\u00d7dDiTBlockFigure 4. Input speci\ufb01cations for DiT. Given patch size p\\u0002p,\\na spatial representation (the noised latent from the V AE) of shape\\nI\\u0002I\\u0002Cis \u201cpatchi\ufb01ed\u201d into a sequence of length T= (I=p)2\\nwith hidden dimension d. A smaller patch size presults in a longer\\nsequence length and thus more G\ufb02ops.\\nPatchify. The input to DiT is a spatial representation z\\n(for256\\u0002256\\u00023images,zhas shape 32\\u000232\\u00024). The\\n\ufb01rst layer of DiT is \u201cpatchify,\u201d which converts the spatial\\ninput into a sequence of Ttokens, each of dimension d,\\nby linearly embedding each patch in the input. Following\\npatchify, we apply standard ViT frequency-based positional\\nembeddings (the sine-cosine version) to all input tokens.\\nThe number of tokens Tcreated by patchify is determined\\nby the patch size hyperparameter p. As shown in Figure 4,\\nhalvingpwill quadruple T, and thus at least quadruple total\\ntransformer G\ufb02ops. Although it has a signi\ufb01cant impact on\\nG\ufb02ops, note that changing phas no meaningful impact on\\ndownstream parameter counts.\\nWe addp= 2;4;8to the DiT design space.\\nDiT block design. Following patchify, the input tokens\\nare processed by a sequence of transformer blocks. In ad-\\ndition to noised image inputs, diffusion models sometimes\\nprocess additional conditional information such as noise\\ntimestepst, class labels c, natural language, etc. We explore\\nfour variants of transformer blocks that process conditional\\ninputs differently. The designs introduce small, but impor-\\ntant, modi\ufb01cations to the standard ViT block design. The\\ndesigns of all blocks are shown in Figure 3.\\n\u2013In-context conditioning. We simply append the vec-\\ntor embeddings of tandcas two additional tokens in\\nthe input sequence, treating them no differently from\\nthe image tokens. This is similar to cls tokens in\\nViTs, and it allows us to use standard ViT blocks with-\\nout modi\ufb01cation. After the \ufb01nal block, we remove the\\nconditioning tokens from the sequence. This approach\\nintroduces negligible new G\ufb02ops to the model.\\n4\\n\\n=== Page 5 ===\\n100K 200K 300K 400K\\nTraining Steps20406080100FID-50K\\nXL/2 In-Context\\nXL/2 Cross-Attention\\nXL/2 adaLN\\nXL/2 adaLN-ZeroFigure 5. Comparing different conditioning strategies. adaLN-\\nZero outperforms cross-attention and in-context conditioning at all\\nstages of training.\\n\u2013Cross-attention block. We concatenate the embeddings\\noftandcinto a length-two sequence, separate from\\nthe image token sequence. The transformer block is\\nmodi\ufb01ed to include an additional multi-head cross-\\nattention layer following the multi-head self-attention\\nblock, similar to the original design from Vaswani et\\nal.[60], and also similar to the one used by LDM for\\nconditioning on class labels. Cross-attention adds the\\nmost G\ufb02ops to the model, roughly a 15% overhead.\\n\u2013Adaptive layer norm (adaLN) block. Following\\nthe widespread usage of adaptive normalization lay-\\ners [40] in GANs [2, 28] and diffusion models with U-\\nNet backbones [9], we explore replacing standard layer\\nnorm layers in transformer blocks with adaptive layer\\nnorm (adaLN). Rather than directly learn dimension-\\nwise scale and shift parameters \\rand\\f, we regress\\nthem from the sum of the embedding vectors of tand\\nc. Of the three block designs we explore, adaLN adds\\nthe least G\ufb02ops and is thus the most compute-ef\ufb01cient.\\nIt is also the only conditioning mechanism that is re-\\nstricted to apply the same function to all tokens.\\n\u2013adaLN-Zero block. Prior work on ResNets has found\\nthat initializing each residual block as the identity\\nfunction is bene\ufb01cial. For example, Goyal et al. found\\nthat zero-initializing the \ufb01nal batch norm scale factor \\r\\nin each block accelerates large-scale training in the su-\\npervised learning setting [13]. Diffusion U-Net mod-\\nels use a similar initialization strategy, zero-initializing\\nthe \ufb01nal convolutional layer in each block prior to any\\nresidual connections. We explore a modi\ufb01cation of\\nthe adaLN DiT block which does the same. In addi-\\ntion to regressing \\rand\\f, we also regress dimension-\\nwise scaling parameters \\u000bthat are applied immediately\\nprior to any residual connections within the DiT block.Model Layers N Hidden size dHeads G\ufb02ops (I=32,p=4)\\nDiT-S 12 384 6 1.4\\nDiT-B 12 768 12 5.6\\nDiT-L 24 1024 16 19.7\\nDiT-XL 28 1152 16 29.1\\nTable 1. Details of DiT models. We follow ViT [10] model con-\\n\ufb01gurations for the Small (S), Base (B) and Large (L) variants; we\\nalso introduce an XLarge (XL) con\ufb01g as our largest model.\\nWe initialize the MLP to output the zero-vector for all\\n\\u000b; this initializes the full DiT block as the identity\\nfunction. As with the vanilla adaLN block, adaLN-\\nZero adds negligible G\ufb02ops to the model.\\nWe include the in-context, cross-attention, adaptive layer\\nnorm and adaLN-Zero blocks in the DiT design space.\\nModel size. We apply a sequence of NDiT blocks, each\\noperating at the hidden dimension size d. Following ViT,\\nwe use standard transformer con\ufb01gs that jointly scale N,\\ndand attention heads [10, 63]. Speci\ufb01cally, we use four\\ncon\ufb01gs: DiT-S, DiT-B, DiT-L and DiT-XL. They cover a\\nwide range of model sizes and \ufb02op allocations, from 0.3\\nto 118.6 G\ufb02ops, allowing us to gauge scaling performance.\\nTable 1 gives details of the con\ufb01gs.\\nWe add B, S, L and XL con\ufb01gs to the DiT design space.\\nTransformer decoder. After the \ufb01nal DiT block, we need\\nto decode our sequence of image tokens into an output noise\\nprediction and an output diagonal covariance prediction.\\nBoth of these outputs have shape equal to the original spa-\\ntial input. We use a standard linear decoder to do this; we\\napply the \ufb01nal layer norm (adaptive if using adaLN) and lin-\\nearly decode each token into a p\\u0002p\\u00022Ctensor, where Cis\\nthe number of channels in the spatial input to DiT. Finally,\\nwe rearrange the decoded tokens into their original spatial\\nlayout to get the predicted noise and covariance.\\nThe complete DiT design space we explore is patch size,\\ntransformer block architecture and model size.\\n4. Experimental Setup\\nWe explore the DiT design space and study the scaling\\nproperties of our model class. Our models are named ac-\\ncording to their con\ufb01gs and latent patch sizes p; for exam-\\nple, DiT-XL/2 refers to the XLarge con\ufb01g and p= 2.\\nTraining. We train class-conditional latent DiT models at\\n256\\u0002256 and512\\u0002512 image resolution on the Ima-\\ngeNet dataset [31], a highly-competitive generative mod-\\neling benchmark. We initialize the \ufb01nal linear layer with\\nzeros and otherwise use standard weight initialization tech-\\nniques from ViT. We train all models with AdamW [29,33].\\n5\",\"annotations\":null}", "tool_call_id": "toolu_0152LHh2Ceoz6hiTuLALsr29"}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 26\\nExtracted page range: 1-5\\n\\n=== Page 1 ===\\nAutoregressive Model Beats Diffusion: Llama for\\nScalable Image Generation\\nPeize Sun1Yi Jiang2\u2020Shoufa Chen1Shilong Zhang1Bingyue Peng2\\nPing Luo1\u2217Zehuan Yuan2\u2217\\n1The University of Hong Kong2ByteDance\\nCodes and models: https://github.com/FoundationVision/LlamaGen\\nFigure 1: Image generation with vanilla autoregressive models . We show samples from our\\nclass-conditional image (top row) and text-conditional image (bottom row) generation models.\\nAbstract\\nWe introduce LlamaGen, a new family of image generation models that apply origi-\\nnal \u201cnext-token prediction\u201d paradigm of large language models to visual generation\\ndomain. It is an affirmative answer to whether vanilla autoregressive models, e.g.,\\nLlama, without inductive biases on visual signals can achieve state-of-the-art image\\ngeneration performance if scaling properly. We reexamine design spaces of image\\ntokenizers, scalability properties of image generation models, and their training\\ndata quality. The outcome of this exploration consists of: (1) An image tokenizer\\nwith downsample ratio of 16, reconstruction quality of 0.94 rFID and codebook\\nusage of 97% on ImageNet benchmark. (2) A series of class-conditional image\\ngeneration models ranging from 111M to 3.1B parameters, achieving 2.18 FID on\\nImageNet 256 \u00d7256 benchmarks, outperforming the popular diffusion models such\\nas LDM, DiT. (3) A text-conditional image generation model with 775M parame-\\nters, from two-stage training on LAION-COCO and high aesthetics quality images,\\ndemonstrating competitive performance of visual quality and text alignment. (4)\\nWe verify the effectiveness of LLM serving frameworks in optimizing the inference\\nspeed of image generation models and achieve 326% - 414% speedup. We release\\nall models and codes to facilitate open-source community of visual generation and\\nmultimodal foundation models.\\n\u2217: Corresponding authors, \u2020: project leadarXiv:2406.06525v1  [cs.CV]  10 Jun 2024\\n\\n=== Page 2 ===\\n1 Introduction\\nBuilt upon autoregressive models, large language models (LLMs) [Vaswani et al. 2017; Devlin et al.\\n2018; Radford et al. 2018; Raffel et al. 2020; Radford et al. 2019; Brown et al. 2020; Zhang et al.\\n2022] generate the text by predicting the next token in a sequence. This \u201cnext-token prediction\u201d\\nparadigm presents unprecedented capabilities in solving language tasks in a human-like conversational\\nmanner [Ouyang et al. 2022; OpenAI 2022, 2023b; Google 2023; Anthropic 2023; Workshop et al.\\n2022; Touvron et al. 2023a,b; Bai et al. 2023a; Yang et al. 2023; Team 2023; Bi et al. 2024] and\\nincredible scalability [Kaplan et al. 2020; Henighan et al. 2020; Hoffmann et al. 2022; Wei et al. 2022;\\nAlabdulmohsin et al. 2022; Chowdhery et al. 2023; Anil et al. 2023], demonstrating a promising path\\ntoward general-purpose artificial intelligence models.\\nWitnessed the scalability of autoregressive models on large language models, pioneering works\\nattempt to explore autoregressive models in image generation, for example, VQV AE [Van Den Oord\\net al. 2017; Razavi et al. 2019], VQGAN [Esser et al. 2021; Lee et al. 2022], DALL-E [Ramesh et al.\\n2021], Parti [Yu et al. 2021, 2022]. They introduce image tokenizers to convert continuous images to\\ndiscrete tokens, and apply autoregressive models to generate image tokens in the way of next-token\\nprediction. They demonstrate strong performance among their contemporaries [Brock et al. 2018;\\nHo et al. 2020; Dhariwal & Nichol 2021] in the year before 2022. However, their open-source\\ncommunities are not well developed, which largely limits their further improvements.\\nAt the same period, another image generation method, diffusion models [Song & Ermon 2019; Ho\\net al. 2020; Song et al. 2020; Dhariwal & Nichol 2021; Nichol et al. 2021; Lu et al. 2022a; Ho\\net al. 2022a; Ho & Salimans 2022; Rombach et al. 2022; Ramesh et al. 2022; Saharia et al. 2022;\\nRombach et al. 2022] develop rapidly. Along with their open-source communities, they dominate\\nthe field of visual generation up to today. However, diffusion models share distinct paradigms with\\nautoregressive language models, which poses a huge challenge to building a unified model between\\nlanguage and vision.\\nIn this work, we are committed to pushing the envelope of autoregressive models on image generation\\nfurther: continuing its research methodology and contributing to open-source community. Reviewing\\nthe literature on image generation in the year before 2024, we identify three keys to existing advanced\\nmodels [Peebles & Xie 2023; Podell et al. 2023; Xue et al. 2023; Chen et al. 2023b,c; Betker et al.\\n2023; Li et al. 2024; Esser et al. 2024]: 1) well-designed image compressors, 2) scalable image\\ngeneration models and 3) high-quality training data. Motivated by this, we reexamine the designs of\\nimage tokenizers (image compressors for autoregressive models), the scalability properties of image\\ngeneration models, and the effects of training data.\\nTowards a potential unified model between language and vision, our design is reducing the inductive\\nbiases on visual signals and adopting the same architecture as LLM. This belongs to a different re-\\nsearch philosophy with recent works [Chang et al. 2022; Yu et al. 2023b; Tian et al. 2024] that modify\\nthe architectures under the guidance of vision-oriented designs. For example, MaskGIT [Chang et al.\\n2022], MAGVIT [Yu et al. 2023a,b] adopt the masked image modeling strategy, V AR [Tian et al.\\n2024] uses hierarchical multi-scale property. Although they have succeeded in achieving leading\\nimage generation performance, and even better than diffusion models, it is still not clear whether\\nthe original language model architectures are capable of this. Instead, our work reveals that vanilla\\nautoregressive models that apply the exactly same \u201cnext-token prediction\u201d as language models are\\nalso able to achieve state-of-the-art image generation performance. As a bonus, we can leverage the\\ntechniques [Dao et al. 2022; Rasley et al. 2020; Shoeybi et al. 2019; Zhao et al. 2023; Kwon et al.\\n2023; Chen et al. 2023a; Dettmers 2022] developed in LLM community to optimize the training\\nrecipes and inference speeds of our models.\\nIn summary, our contributions to the community include:\\n1.Image tokenizer: An image tokenizer with downsample ratio of 16, achieves reconstruction\\nquality of 0.94 rFID and codebook usage of 97% on ImageNet benchmark. With the downsample\\nratio of 8, our tokenizer is competitive or even better than continuous V AE [Rombach et al.\\n2022; Podell et al. 2023; OpenAI 2023a] used in diffusion models. This shows that discrete\\nrepresentation in image tokenizers is no longer the bottleneck of the image reconstruction.\\n2.Scalable image generation model: A series of class-conditional image generation models,\\nranging from 111M to 3.1B parameters, are developed based on Llama architecture [Touvron\\n2\\n\\n=== Page 3 ===\\net al. 2023a,b]. The largest model realizes 2.18 FID on ImageNet 256 \u00d7256 benchmarks,\\noutperforming the popular diffusion models such as LDM [Rombach et al. 2022], DiT [Peebles\\n& Xie 2023]. This shows that vanilla autoregressive models without inductive biases on visual\\nsignals can serve as the basis of image generation systems.\\n3.Hiqh-quality training data: A text-conditional image generation model with 775M parameters,\\nis firstly trained on a 50M subset of LAION-COCO [LAION 2022] and then fine-tuned on\\n10M internal high aesthetics quality images. It demonstrates competitive performance of visual\\nquality and text alignment.\\n4.Optimized inference speed: We adopt vLLM [Kwon et al. 2023], one of the most popular\\nLLM serving frameworks, to optimize the inference speed of our image generation models, and\\nremarkable 326% - 414% speedup is achieved.\\nWe release all models and codes to facilitate the open-source community of visual generation and\\nmultimodal foundation models. It is worth noticing that our released models are still behind state-of-\\nthe-art visual generation models based on diffusion models [Alpha-VLLM 2024; Esser et al. 2024;\\nBrooks et al. 2024]. When more training data and computation resources are available in the future,\\nlarge-scale AR-based visual generation models, e.g., above 7B parameters, will be explored.\\n2 Autoregressive Models for Image Generation\\n2.1 Overview\\nFirstly, image pixels x\u2208RH\u00d7W\u00d73are quantized into q\u2208Qh\u00d7wdiscrete tokens by the image\\ntokenizer [Van Den Oord et al. 2017; Esser et al. 2021; Yu et al. 2021], where h=H/p,w=W/p ,\\npis downsample ratio of the image tokenizer, q(i,j)is indices of the image codebook. Then, these\\nimage tokens are reshaped to a sequence of h\u00b7wtokens in raster scan ordering and used to train\\nTransformer [Vaswani et al. 2017]-based autoregressive models.\\nDuring image generation, image tokens (q1, q2, . . . , q h\u00b7w)are generated by autoregressive mod-\\nels [Radford et al. 2018, 2019; Brown et al. 2020; Touvron et al. 2023a] in the way of next-token\\npredictionQh\u00b7w\\nt=1p(qt|q<t, c), where cis class label embedding or text embedding. Finally, these\\nimage tokens are converted to image pixels by the image tokenizer decoder.\\n2.2 Image Tokenizer\\nQuantized-Autoencoder architecture. We use the same architecture as VQGAN [Esser et al.\\n2021], encoder-quantizer-decoder. The encoder and the decoder are ConvNet with downsample ratio\\np. The quantizer contains a codebook Z\u2208RK\u00d7CwithKlearnable vectors. The encoder projects\\nimage pixels xto the feature map f. The quantization process maps each vector f(i,j)in the feature\\nmap to the code index q(i,j)of its nearest vector z(i,j)in the codebook. During decoding, the code\\nindex q(i,j)is remapped to the feature vector z(i,j)and the decoder converts these feature vectors\\nback to the image pixels \u02c6x.\\nThe codebook has critical effects on image tokenization performance. Following [Yu et al. 2021], we\\nuse\u21132-normalization to codebook vectors, low codebook vector dimension C, and large codebook\\nsizeK. These designs significantly improve reconstruction quality and codebook usage. More details\\nwill be discussed in experiments.\\nTraining losses. Since quantization is a non-differentiable operation, a straight-through gradient\\nestimator [Bengio et al. 2013] is used to preserve the gradient from the decoder to the encoder\\nz=sg[z\u2212f] +f,sg[\u00b7]is stop-gradient operation. For codebook learning, LVQ=\u2225sg[f]\u2212z\u22252\\n2+\\n\u03b2\u2225f\u2212sg[z]\u22252\\n2, where the second term is commitment loss [Van Den Oord et al. 2017] to force feature\\nvectors extracted from the encoder to be close to codebook vectors, \u03b2is commitment loss weight.\\nFor simplicity, we don\u2019t add entropy loss [Yu et al. 2023a; Chang et al. 2022] in codebook learning.\\nFor image reconstruction training, LAE=\u21132(x,\u02c6x)+LP(x,\u02c6x)+\u03bbGLG(\u02c6x), where \u21132is a reconstruction\\nloss on image pixels, LP(\u00b7)is a perceptual loss from LPIPS [Zhang et al. 2018], LG(\u00b7)is an adversarial\\nloss from a PatchGAN [Isola et al. 2017] discriminator trained at the same time with the image\\ntokenizer, and \u03bbGis adversarial loss weight.\\n3\\n\\n=== Page 4 ===\\nModel Parameters Layers Hidden Size Heads\\nLlamaGen-B 111M 12 768 12\\nLlamaGen-L 343M 24 1024 16\\nLlamaGen-XL 775M 36 1280 20\\nLlamaGen-XXL 1.4B 48 1536 24\\nLlamaGen-3B 3.1B 24 3200 32\\nTable 1: Model sizes and architecture configurations of LlamaGen. The configurations are\\nfollowing previous works [Radford et al. 2019; Touvron et al. 2023a; OpenLM-Research 2023].\\n2.3 Image Generation by Autoregressive Models\\nLlama architecture. Our model architecture is largely based on Llama [Touvron et al. 2023a,b],\\napplying pre-normalization using RMSNorm [Zhang & Sennrich 2019], SwiGLU activation func-\\ntion [Shazeer 2020], and rotary positional embeddings [Su et al. 2024]. Specifically, we use 2D RoPE\\nin at each layer of our model, following the implementation of [Lu et al. 2023; Fang et al. 2023]. We\\ndo not use the technique of AdaLN [Peebles & Xie 2023] to keep our structure the same as LLM.\\nClass-conditional image generation. The class embedding is indexed from a set of learnable\\nembeddings [Peebles & Xie 2023; Esser et al. 2021] and is used as the prefilling token embedding.\\nStarting from this token embedding, the model generates the sequence of image tokens by next-token\\nprediction way, and stops at the location of the pre-defined maximum length.\\nText-conditional image generation. To integrate the text condition into autoregressive models, we\\nuse FLAN-T5 XL [Chung et al. 2024] as the text encoder, the encoded text feature is projected by an\\nadditional MLP [Chen et al. 2023b,c] and is used as prefilling token embedding in autoregressive\\nmodels. We note that this design is not an ultimate design for multimodal foundation models, where\\na unified vocabulary is established between language and vision [Lu et al. 2023; Team et al. 2023].\\nWe leave it for future research.\\nClassifier-free guidance. Developed in the diffusion model community, classifier-free guidance [Ho\\n& Salimans 2022] is well-known for its improving visual quality and text-image alignment. We adopt\\nit in our models. During training, the conditional is randomly dropped and is replaced by a null\\nunconditional embedding [Peebles & Xie 2023; Chen et al. 2023b]. In inference, for each token, its\\nlogit\u2113gis formed by \u2113g=\u2113u+s(\u2113c\u2212\u2113u), where \u2113cis conditional logit, \u2113uis unconditional logit,\\nandsis scale of the classifier-free guidance.\\nIt is worth noting that all design choices discussed so far are largely inspired by previous works, for\\nexample, image tokenizer is borrowed from [Rombach et al. 2022; Yu et al. 2021], image generation\\nis from [Peebles & Xie 2023; Chen et al. 2023b; Esser et al. 2021]. A large portion of these techniques\\nare well studied in diffusion models but little in AR models. Our work adapts these advanced designs\\ncollectively to AR-based visual generation models.\\n2.4 Scale Up\\nOur model architecture is almost the same as Llama, which allows us to seamlessly adopt optimization\\ntechniques [Zhang & Sennrich 2019; Shazeer 2020; Su et al. 2024] and training recipes [Dao et al.\\n2022; Rasley et al. 2020; Shoeybi et al. 2019] in LLM community. As shown in Table 1, we scale the\\nmodel size up to 3.1B parameters in this work. All models are implemented with PyTorch 2 [Ansel\\net al. 2024] and trained on 80GB A100 GPUs. For training the models with parameters below 1.4B,\\nwe directly use DDP, otherwise, we adopt PyTorch FSDP [Zhao et al. 2023] to optimize GPU memory\\nusage.\\n2.5 Serving\\nAutoregressive models have always suffered from its low inference speed. With the rapid development\\nof large language models, advanced inference techniques [Kwon et al. 2023; Chen et al. 2023a;\\nDettmers 2022] are proposed in the LLM community to optimize the inference speed.\\n4\\n\\n=== Page 5 ===\\nSimilar to training, inference techniques developed in the LLM community can also be adopted to\\noptimize our models. We verify the effectiveness of vLLM [Kwon et al. 2023], one of the most\\npopular LLM serving frameworks, on our image generation methods. As shown in Table 7, 326% -\\n414% speedup is achieved compared to the baseline setting.\\n3 Experiments\\n3.1 Image Tokenizer\\nTraining setup. The training is on ImageNet [Deng et al. 2009] train set, using the resolution of\\n256\u00d7256 and random crop data augmentation. The image tokenizer model size is 72M and 70M\\nwhen the downsample ratio is 16 and 8, respectively. All models are trained with the same settings:\\nconstant learning rate of 10\u22124, AdamW optimizer with \u03b21= 0.9,\u03b22= 0.95, weight decay = 0.05,\\nbatch size of 128 and training epochs of 40. For the training losses, commitment loss weight is 0.25\\nand adversarial loss weight is 0.5. The adversarial loss is enabled after 20k training iterations.\\nEvaluation metrics. We use the popular ImageNet benchmark under the image resolution of 256\\n\u00d7256. The image reconstruction quality is measured by r-FID, reconstruction-FID on 256 \u00d7256\\nImageNet 50k validation set. The codebook usage is calculated as the percentage of used codes in the\\nqueue of size 65536 over the whole codebook size. We also report PSNR and SSIM as the metrics of\\nreconstruction quality, following SDXL [Podell et al. 2023].\\ndim rFID\u2193PSNR\u2191SSIM\u2191usage\u2191\\n256 9.21 18.32 0.575 0.29%\\n32 3.22 19.98 0.646 20.9%\\n8 2.19 20.79 0.675 97.0%\\n4 9.88 19.39 0.593 82.0%\\n(a)Codebook vector dimension. Lower vector di-\\nmension (from 256 to 8) improves both reconstruction\\nquality and codebook usage significantly.size rFID\u2193PSNR\u2191SSIM\u2191usage\u2191\\n4096 3.02 19.99 0.643 100.0%\\n8192 2.91 20.41 0.654 75.0%\\n16384 2.19 20.79 0.675 97.0%\\n32768 2.26 20.59 0.663 85.0%\\n(b)Codebook size. Larger codebook size (from 4096\\nto 16384) benefits to the overall performance of image\\ntokenizers.\\nTable 2: Ablation studies on codebook designs in image tokenizers. . The evaluations are on\\n256\u00d7256 ImageNet 50k validation set. The default setting is codebook vector dimension is 8,\\ncodebook size is 16384, downsample ratio is 16.\\nratio img size tokens size rFID\u2193PSNR\u2191SSIM\u2191usage\u2191\\n256 256 (16 \u00d716) 2.19 20.79 0.675 97.0%\\n16 384 576 (24 \u00d724) 0.94 21.94 0.726 97.0%\\n512 1024 (32 \u00d732) 0.70 23.03 0.772 97.0%\\n256 1024 (32 \u00d732) 0.59 24.45 0.813 97.6%\\n8 384 2304 (48 \u00d748) 0.37 25.63 0.852 97.6%\\n512 4096 (64 \u00d764) 0.39 26.98 0.888 97.6%\\nTable 3: Number of tokens to represent the image. The number of tokens depends on downsample\\nratio and input image size. The reconstructed image is always resized to 256 \u00d7256 when evaluating\\non ImageNet 50k validation set. The default setting is codebook vector dimension is 8, codebook\\nsize is 16384.\\nEffect of image codebook designs. As shown in Table 2, when the codebook vector dimension is\\nreduced from 256 to 32 to 8, much better reconstruction quality and codebook usage are consistently\\nachieved. For codebook size, a larger size from 4096 to 16384 benefits the overall performance.\\nThese observations are consistent with previous works [Yu et al. 2021, 2023b].\\nEffect of number of tokens to represent the image. Table 3 studies the effect of image token\\nnumber on image reconstruction quality. Using the same image tokenizer, for example, downsample\\nratio as 16, representing an image with only 256 tokens (16 \u00d716) is not sufficient for good reconstruc-\\ntion quality, and increasing the number of tokens to 576 (24 \u00d724) could largely improve the image\\nquality from 2.43 to 0.99 rFID.\\n5\",\"annotations\":null}", "tool_call_id": "toolu_01CJBS9fTTM9fRPxaEToHUoM"}, {"role": "assistant", "content": "Good! I can see the first paper is about DiT (Diffusion Transformers) and the second is about LlamaGen (Autoregressive models). Let me search for the experimental results on ImageNet 256\u00d7256 in both papers.", "tool_calls": [{"id": "toolu_01A2D9coAhoNcBPpzsAPip9F", "type": "function", "function": {"name": "pdf-tools-search_pdf_content", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"pattern\": \"ImageNet 256.*FID|FID.*ImageNet 256|256.*256.*FID\", \"page_size\": 20}"}}, {"id": "toolu_01NAFg9ZiNKVbAXzz7kKoDT7", "type": "function", "function": {"name": "pdf-tools-search_pdf_content", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2406.06525v1.pdf\", \"pattern\": \"ImageNet 256.*FID|FID.*ImageNet 256|256.*256.*FID\", \"page_size\": 20}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"Search ID: 14508e95\\nPattern: ImageNet 256.*FID|FID.*ImageNet 256|256.*256.*FID\\nTotal matches: 2\\nPage: 1/1\\nResults per page: 20\\n\\nMatch 1:\\n  Page: 9\\n  Text: \\\"ImageNet 256\\u0002256. DiT-XL/2 achieves state-of-the-art FID\\\"\\n  Context: ...G (cfg=1.50) 2.27 4.60 278.24 0.83 0.57\\nTable 2. Benchmarking class-conditional image generation on\\n[ImageNet 256\\u0002256. DiT-XL/2 achieves state-of-the-art FID].\\nClass-Conditional ImageNet 512 \\u0002512\\nModel FID # sFID# IS\\\" Precision\\\"Recall\\\"\\nBigGAN-deep [2] 8.43 8...\\n\\nMatch 2:\\n  Page: 13\\n  Text: \\\"256\\u0002256and512\\u0002512DiT-XL/2 models, we never observed FID\\\"\\n  Context: ...s exclude the V AE model which contains 84M parameters across the\\nencoder and decoder. For both the [256\\u0002256and512\\u0002512DiT-XL/2 models, we never observed FID] saturate and continued training\\nthem as long as possible. Numbers reported in this table use the ft...\\n\\n\",\"annotations\":null}", "tool_call_id": "toolu_01A2D9coAhoNcBPpzsAPip9F"}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"Search ID: 61cb7014\\nPattern: ImageNet 256.*FID|FID.*ImageNet 256|256.*256.*FID\\nTotal matches: 1\\nPage: 1/1\\nResults per page: 20\\n\\nMatch 1:\\n  Page: 3\\n  Text: \\\"FID on ImageNet 256\\\"\\n  Context: ...et al. 2023a,b]. The largest model realizes 2.18 [FID on ImageNet 256] \u00d7256 benchmarks,\\noutperforming the popular diffusion models such as LDM [Rombach et al. 2022], DiT ...\\n\\n\",\"annotations\":null}", "tool_call_id": "toolu_01NAFg9ZiNKVbAXzz7kKoDT7"}, {"role": "assistant", "content": "Great! Now let me read the pages with the detailed experimental results tables. Let me check page 9 of the DiT paper and look for more details in both papers.", "tool_calls": [{"id": "toolu_01N8gtEk5D5SXDEHMXiCoESo", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"start_page\": 8, \"end_page\": 10}"}}, {"id": "toolu_01MHpK7CXWZUcb3hhGNCgKwB", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2406.06525v1.pdf\", \"start_page\": 6, \"end_page\": 8}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 25\\nExtracted page range: 8-10\\n\\n=== Page 8 ===\\n100101102\\nTransformer Gflops20406080100120140160FID-50K\\nCorrelation: -0.93S/8\\nS/4\\nS/2B/8\\nB/4\\nB/2L/8\\nL/4\\nL/2XL/8\\nXL/4\\nXL/2Figure 8. Transformer G\ufb02ops are strongly correlated with FID.\\nWe plot the G\ufb02ops of each of our DiT models and each model\u2019s\\nFID-50K after 400K training steps.\\nScaling model size and patch size. We train 12 DiT mod-\\nels, sweeping over model con\ufb01gs (S, B, L, XL) and patch\\nsizes (8, 4, 2). Note that DiT-L and DiT-XL are signi\ufb01cantly\\ncloser to each other in terms of relative G\ufb02ops than other\\ncon\ufb01gs. Figure 2 (left) gives an overview of the G\ufb02ops of\\neach model and their FID at 400K training iterations. In\\nall cases, we \ufb01nd that increasing model size and decreasing\\npatch size yields considerably improved diffusion models.\\nFigure 6 (top) demonstrates how FID changes as model\\nsize is increased and patch size is held constant. Across all\\nfour con\ufb01gs, signi\ufb01cant improvements in FID are obtained\\nover all stages of training by making the transformer deeper\\nand wider. Similarly, Figure 6 (bottom) shows FID as patch\\nsize is decreased and model size is held constant. We again\\nobserve considerable FID improvements throughout train-\\ning by simply scaling the number of tokens processed by\\nDiT, holding parameters approximately \ufb01xed.\\nDiT G\ufb02ops are critical to improving performance. The\\nresults of Figure 6 suggest that parameter counts do not\\nuniquely determine the quality of a DiT model. As model\\nsize is held constant and patch size is decreased, the trans-\\nformer\u2019s total parameters are effectively unchanged (actu-\\nally, total parameters slightly decrease ), and only G\ufb02ops are\\nincreased. These results indicate that scaling model G\ufb02ops\\nis actually the key to improved performance. To investi-\\ngate this further, we plot the FID-50K at 400K training steps\\nagainst model G\ufb02ops in Figure 8. The results demonstrate\\nthat different DiT con\ufb01gs obtain similar FID values when\\ntheir total G\ufb02ops are similar (e.g., DiT-S/2 and DiT-B/4).\\nWe \ufb01nd a strong negative correlation between model G\ufb02ops\\nand FID-50K, suggesting that additional model compute is\\nthe critical ingredient for improved DiT models. In Fig-\\nure 12 (appendix), we \ufb01nd that this trend holds for other\\nmetrics such as Inception Score.\\n107108109101010111012\\nTraining Compute (Gflops)0255075100125150175200FID-50K\\n1015202530\\nS/8\\nS/4\\nS/2B/8\\nB/4\\nB/2L/8\\nL/4\\nL/2XL/8\\nXL/4\\nXL/2Figure 9. Larger DiT models use large compute more ef\ufb01-\\nciently. We plot FID as a function of total training compute.\\nLarger DiT models are more compute-ef\ufb01cient. In\\nFigure 9, we plot FID as a function of total training compute\\nfor all DiT models. We estimate training compute as model\\nG\ufb02ops\\u0001batch size\\u0001training steps\\u00013, where the factor of\\n3 roughly approximates the backwards pass as being twice\\nas compute-heavy as the forward pass. We \ufb01nd that small\\nDiT models, even when trained longer, eventually become\\ncompute-inef\ufb01cient relative to larger DiT models trained for\\nfewer steps. Similarly, we \ufb01nd that models that are identi-\\ncal except for patch size have different performance pro\ufb01les\\neven when controlling for training G\ufb02ops. For example,\\nXL/4 is outperformed by XL/2 after roughly 1010G\ufb02ops.\\nVisualizing scaling. We visualize the effect of scaling on\\nsample quality in Figure 7. At 400K training steps, we sam-\\nple an image from each of our 12 DiT models using iden-\\ntical starting noise xtmax, sampling noise and class labels.\\nThis lets us visually interpret how scaling affects DiT sam-\\nple quality. Indeed, scaling both model size and the number\\nof tokens yields notable improvements in visual quality.\\n5.1. State-of-the-Art Diffusion Models\\n256\\u0002256 ImageNet. Following our scaling analysis, we\\ncontinue training our highest G\ufb02op model, DiT-XL/2, for\\n7M steps. We show samples from the model in Figures 1,\\nand we compare against state-of-the-art class-conditional\\ngenerative models. We report results in Table 2. When us-\\ning classi\ufb01er-free guidance, DiT-XL/2 outperforms all prior\\ndiffusion models, decreasing the previous best FID-50K of\\n3.60 achieved by LDM to 2.27. Figure 2 (right) shows that\\nDiT-XL/2 (118.6 G\ufb02ops) is compute-ef\ufb01cient relative to la-\\ntent space U-Net models like LDM-4 (103.6 G\ufb02ops) and\\nsubstantially more ef\ufb01cient than pixel space U-Net mod-\\nels such as ADM (1120 G\ufb02ops) or ADM-U (742 G\ufb02ops).\\n8\\n\\n=== Page 9 ===\\nClass-Conditional ImageNet 256 \\u0002256\\nModel FID # sFID# IS\\\" Precision\\\"Recall\\\"\\nBigGAN-deep [2] 6.95 7.36 171.4 0.87 0.28\\nStyleGAN-XL [53] 2.30 4.02 265.12 0.78 0.53\\nADM [9] 10.94 6.02 100.98 0.69 0.63\\nADM-U 7.49 5.13 127.49 0.72 0.63\\nADM-G 4.59 5.25 186.70 0.82 0.52\\nADM-G, ADM-U 3.94 6.14 215.84 0.83 0.53\\nCDM [20] 4.88 - 158.71 - -\\nLDM-8 [48] 15.51 - 79.03 0.65 0.63\\nLDM-8-G 7.76 - 209.52 0.84 0.35\\nLDM-4 10.56 - 103.49 0.71 0.62\\nLDM-4-G (cfg=1.25) 3.95 - 178.22 0.81 0.55\\nLDM-4-G (cfg=1.50) 3.60 - 247.67 0.87 0.48\\nDiT-XL/2 9.62 6.85 121.50 0.67 0.67\\nDiT-XL/2-G (cfg=1.25) 3.22 5.28 201.77 0.76 0.62\\nDiT-XL/2-G (cfg=1.50) 2.27 4.60 278.24 0.83 0.57\\nTable 2. Benchmarking class-conditional image generation on\\nImageNet 256\\u0002256. DiT-XL/2 achieves state-of-the-art FID.\\nClass-Conditional ImageNet 512 \\u0002512\\nModel FID # sFID# IS\\\" Precision\\\"Recall\\\"\\nBigGAN-deep [2] 8.43 8.13 177.90 0.88 0.29\\nStyleGAN-XL [53] 2.41 4.06 267.75 0.77 0.52\\nADM [9] 23.24 10.19 58.06 0.73 0.60\\nADM-U 9.96 5.62 121.78 0.75 0.64\\nADM-G 7.72 6.57 172.71 0.87 0.42\\nADM-G, ADM-U 3.85 5.86 221.72 0.84 0.53\\nDiT-XL/2 12.03 7.12 105.25 0.75 0.64\\nDiT-XL/2-G (cfg=1.25) 4.64 5.77 174.77 0.81 0.57\\nDiT-XL/2-G (cfg=1.50) 3.04 5.02 240.82 0.84 0.54\\nTable 3. Benchmarking class-conditional image generation on\\nImageNet 512\\u0002512. Note that prior work [9] measures Precision\\nand Recall using 1000 real samples for 512\\u0002512resolution; for\\nconsistency, we do the same.\\nOur method achieves the lowest FID of all prior generative\\nmodels, including the previous state-of-the-art StyleGAN-\\nXL [53]. Finally, we also observe that DiT-XL/2 achieves\\nhigher recall values at all tested classi\ufb01er-free guidance\\nscales compared to LDM-4 and LDM-8. When trained for\\nonly 2.35M steps (similar to ADM), XL/2 still outperforms\\nall prior diffusion models with an FID of 2.55.\\n512\\u0002512 ImageNet. We train a new DiT-XL/2 model on\\nImageNet at 512\\u0002512resolution for 3M iterations with\\nidentical hyperparameters as the 256\\u0002256model. With a\\npatch size of 2, this XL/2 model processes a total of 1024\\ntokens after patchifying the 64\\u000264\\u00024input latent (524.6\\nG\ufb02ops). Table 3 shows comparisons against state-of-the-art\\nmethods. XL/2 again outperforms all prior diffusion models\\nat this resolution, improving the previous best FID of 3.85\\nachieved by ADM to 3.04. Even with the increased num-\\nber of tokens, XL/2 remains compute-ef\ufb01cient. For exam-\\nple, ADM uses 1983 G\ufb02ops and ADM-U uses 2813 G\ufb02ops;\\nXL/2 uses 524.6 G\ufb02ops. We show samples from the high-\\nresolution XL/2 model in Figure 1 and the appendix.\\n101\\n102\\n103\\n104\\n105\\nSampling Compute (Gflops)20406080100120140160180FID-10K\\nS/8\\nS/4\\nS/2B/8\\nB/4\\nB/2L/8\\nL/4\\nL/2XL/8\\nXL/4\\nXL/2Figure 10. Scaling-up sampling compute does not compensate\\nfor a lack of model compute. For each of our DiT models trained\\nfor 400K iterations, we compute FID-10K using [16, 32, 64, 128,\\n256, 1000] sampling steps. For each number of steps, we plot the\\nFID as well as the G\ufb02ops used to sample each image. Small mod-\\nels cannot close the performance gap with our large models, even\\nif they sample with more test-time G\ufb02ops than the large models.\\n5.2. Scaling Model vs. Sampling Compute\\nDiffusion models are unique in that they can use addi-\\ntional compute after training by increasing the number of\\nsampling steps when generating an image. Given the im-\\npact of model G\ufb02ops on sample quality, in this section we\\nstudy if smaller- model compute DiTs can outperform larger\\nones by using more sampling compute . We compute FID\\nfor all 12 of our DiT models after 400K training steps, us-\\ning [16, 32, 64, 128, 256, 1000] sampling steps per-image.\\nThe main results are in Figure 10. Consider DiT-L/2 us-\\ning 1000 sampling steps versus DiT-XL/2 using 128 steps.\\nIn this case, L/2 uses 80:7T\ufb02ops to sample each image;\\nXL/2 uses 5\\u0002less compute\u2014 15:2T\ufb02ops\u2014to sample each\\nimage. Nonetheless, XL/2 has the better FID-10K (23.7\\nvs 25.9). In general, scaling-up sampling compute cannot\\ncompensate for a lack of model compute.\\n6. Conclusion\\nWe introduce Diffusion Transformers (DiTs), a simple\\ntransformer-based backbone for diffusion models that out-\\nperforms prior U-Net models and inherits the excellent scal-\\ning properties of the transformer model class. Given the\\npromising scaling results in this paper, future work should\\ncontinue to scale DiTs to larger models and token counts.\\nDiT could also be explored as a drop-in backbone for text-\\nto-image models like DALL \\u0001E 2 and Stable Diffusion.\\nAcknowledgements. We thank Kaiming He, Ronghang\\nHu, Alexander Berg, Shoubhik Debnath, Tim Brooks, Ilija\\nRadosavovic and Tete Xiao for helpful discussions. William\\nPeebles is supported by the NSF GRFP.\\n9\\n\\n=== Page 10 ===\\nReferences\\n[1] James Bradbury, Roy Frostig, Peter Hawkins,\\nMatthew James Johnson, Chris Leary, Dougal Maclau-\\nrin, George Necula, Adam Paszke, Jake VanderPlas, Skye\\nWanderman-Milne, and Qiao Zhang. JAX: composable\\ntransformations of Python+NumPy programs, 2018. 6\\n[2] Andrew Brock, Jeff Donahue, and Karen Simonyan. Large\\nscale GAN training for high \ufb01delity natural image synthesis.\\nInICLR , 2019. 5, 9\\n[3] Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Sub-\\nbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan,\\nPranav Shyam, Girish Sastry, Amanda Askell, et al. Lan-\\nguage models are few-shot learners. In NeurIPS , 2020. 1\\n[4] Huiwen Chang, Han Zhang, Lu Jiang, Ce Liu, and William T\\nFreeman. Maskgit: Masked generative image transformer. In\\nCVPR , pages 11315\u201311325, 2022. 2\\n[5] Lili Chen, Kevin Lu, Aravind Rajeswaran, Kimin Lee,\\nAditya Grover, Misha Laskin, Pieter Abbeel, Aravind Srini-\\nvas, and Igor Mordatch. Decision transformer: Reinforce-\\nment learning via sequence modeling. In NeurIPS , 2021. 2\\n[6] Mark Chen, Alec Radford, Rewon Child, Jeffrey Wu, Hee-\\nwoo Jun, David Luan, and Ilya Sutskever. Generative pre-\\ntraining from pixels. In ICML , 2020. 1, 2\\n[7] Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever.\\nGenerating long sequences with sparse transformers. arXiv\\npreprint arXiv:1904.10509 , 2019. 2\\n[8] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina\\nToutanova. Bert: Pre-training of deep bidirectional trans-\\nformers for language understanding. In NAACL-HCT , 2019.\\n1\\n[9] Prafulla Dhariwal and Alexander Nichol. Diffusion models\\nbeat gans on image synthesis. In NeurIPS , 2021. 1, 2, 3, 5,\\n6, 9, 12\\n[10] Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov,\\nDirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner,\\nMostafa Dehghani, Matthias Minderer, Georg Heigold, Syl-\\nvain Gelly, et al. An image is worth 16x16 words: Trans-\\nformers for image recognition at scale. In ICLR , 2020. 1, 2,\\n4, 5\\n[11] Patrick Esser, Robin Rombach, and Bj \u00a8orn Ommer. Taming\\ntransformers for high-resolution image synthesis, 2020. 2\\n[12] Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing\\nXu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and\\nYoshua Bengio. Generative adversarial nets. In NIPS , 2014.\\n3\\n[13] Priya Goyal, Piotr Doll \u00b4ar, Ross Girshick, Pieter Noord-\\nhuis, Lukasz Wesolowski, Aapo Kyrola, Andrew Tulloch,\\nYangqing Jia, and Kaiming He. Accurate, large minibatch\\nsgd: Training imagenet in 1 hour. arXiv:1706.02677 , 2017.\\n5\\n[14] Shuyang Gu, Dong Chen, Jianmin Bao, Fang Wen, Bo\\nZhang, Dongdong Chen, Lu Yuan, and Baining Guo. Vec-\\ntor quantized diffusion model for text-to-image synthesis. In\\nCVPR , pages 10696\u201310706, 2022. 2\\n[15] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.\\nDeep residual learning for image recognition. In CVPR ,\\n2016. 2[16] Dan Hendrycks and Kevin Gimpel. Gaussian error linear\\nunits (gelus). arXiv preprint arXiv:1606.08415 , 2016. 12\\n[17] Tom Henighan, Jared Kaplan, Mor Katz, Mark Chen,\\nChristopher Hesse, Jacob Jackson, Heewoo Jun, Tom B\\nBrown, Prafulla Dhariwal, Scott Gray, et al. Scaling laws\\nfor autoregressive generative modeling. arXiv preprint\\narXiv:2010.14701 , 2020. 2\\n[18] Martin Heusel, Hubert Ramsauer, Thomas Unterthiner,\\nBernhard Nessler, and Sepp Hochreiter. Gans trained by a\\ntwo time-scale update rule converge to a local nash equilib-\\nrium. 2017. 6\\n[19] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffu-\\nsion probabilistic models. In NeurIPS , 2020. 2, 3\\n[20] Jonathan Ho, Chitwan Saharia, William Chan, David J\\nFleet, Mohammad Norouzi, and Tim Salimans. Cas-\\ncaded diffusion models for high \ufb01delity image generation.\\narXiv:2106.15282 , 2021. 3, 9\\n[21] Jonathan Ho and Tim Salimans. Classi\ufb01er-free diffusion\\nguidance. In NeurIPS 2021 Workshop on Deep Generative\\nModels and Downstream Applications , 2021. 3, 4\\n[22] Aapo Hyv \u00a8arinen and Peter Dayan. Estimation of non-\\nnormalized statistical models by score matching. Journal\\nof Machine Learning Research , 6(4), 2005. 3\\n[23] Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A\\nEfros. Image-to-image translation with conditional adver-\\nsarial networks. In Proceedings of the IEEE conference on\\ncomputer vision and pattern recognition , pages 1125\u20131134,\\n2017. 2\\n[24] Allan Jabri, David Fleet, and Ting Chen. Scalable adap-\\ntive computation for iterative generation. arXiv preprint\\narXiv:2212.11972 , 2022. 3\\n[25] Michael Janner, Qiyang Li, and Sergey Levine. Of\ufb02ine rein-\\nforcement learning as one big sequence modeling problem.\\nInNeurIPS , 2021. 2\\n[26] Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B\\nBrown, Benjamin Chess, Rewon Child, Scott Gray, Alec\\nRadford, Jeffrey Wu, and Dario Amodei. Scaling laws for\\nneural language models. arXiv:2001.08361 , 2020. 2, 13\\n[27] Tero Karras, Miika Aittala, Timo Aila, and Samuli Laine.\\nElucidating the design space of diffusion-based generative\\nmodels. In Proc. NeurIPS , 2022. 3\\n[28] Tero Karras, Samuli Laine, and Timo Aila. A style-based\\ngenerator architecture for generative adversarial networks. In\\nCVPR , 2019. 5\\n[29] Diederik Kingma and Jimmy Ba. Adam: A method for\\nstochastic optimization. In ICLR , 2015. 5\\n[30] Diederik P Kingma and Max Welling. Auto-encoding varia-\\ntional bayes. arXiv preprint arXiv:1312.6114 , 2013. 3, 6\\n[31] Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton.\\nImagenet classi\ufb01cation with deep convolutional neural net-\\nworks. In NeurIPS , 2012. 5\\n[32] Tuomas Kynk \u00a8a\u00a8anniemi, Tero Karras, Samuli Laine, Jaakko\\nLehtinen, and Timo Aila. Improved precision and recall met-\\nric for assessing generative models. In NeurIPS , 2019. 6\\n[33] Ilya Loshchilov and Frank Hutter. Decoupled weight decay\\nregularization. arXiv:1711.05101 , 2017. 5\\n10\",\"annotations\":null}", "tool_call_id": "toolu_01N8gtEk5D5SXDEHMXiCoESo"}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 26\\nExtracted page range: 6-8\\n\\n=== Page 6 ===\\nratio method dim sizeImageNet COCO\\nrFID\u2193PSNR\u2191SSIM\u2191rFID\u2193PSNR\u2191SSIM\u2191\\n16VQGAN 256 1024 8.30 19.51 0.614 16.95 19.08 0.613\\nVQGAN 256 16384 4.99 20.00 0.629 12.29 19.57 0.630\\nMaskGIT 256 1024 2.28 - - - - -\\nOurs 8 16384 2.19 20.79 0.675 8.11 20.42 0.678\\n8VQGANoim.4 256 1.44 22.63 0.737 6.58 22.289 0.744\\nVQGANoim.4 16384 1.19 23.38 0.762 5.89 23.08 0.771\\nViT-VQGAN 32 8192 1.28 - - - - -\\nOurs 8 16384 0.59 24.45 0.813 4.19 24.20 0.822\\n8SD-V AEukn.4 - 0.74 25.68 0.820 4.45 25.41 0.831\\nSDXL-V AEukn.4 - 0.68 26.04 0.834 4.07 25.76 0.845\\nOAI-Decoderukn.4 - 0.81 24.43 0.786 4.59 24.19 0.800\\nTable 4: Comparisons with other image tokenizers. The evaluations are on 256 \u00d7256 ImageNet\\n50k validation set and COCO 5k val2017 set. All models are trained on ImageNet except \u201coim.\u201d is\\non OpenImage, \u201cukn.\u201d is unknown training data.\\nComparisons with other image tokenizers. We compare with other image tokenizers, including\\nVQGAN [Esser et al. 2021], MaskGIT [Chang et al. 2022], ViT-VQGAN [Yu et al. 2021]. As shown\\nin Table 4, our tokenizer outperforms previous image tokenizers. We also evaluate our tokenizer on\\nCOCO val2017 [Lin et al. 2014] of 256 \u00d7256 image resolution to verify the image reconstruction\\nquality, since COCO images contain more complex scenes. The comparison results are consistent\\nwith those in ImageNet validation set. This shows our tokenizer is a generalizable image tokenizer\\nfor both object-centric and scene-centric images.\\nImportantly, our tokenizer is competitive to continuous latent space representation, such as SD\\nV AE [Rombach et al. 2022], SDXL V AE [Podell et al. 2023], and Consistency Decoder from\\nOpenAI [OpenAI 2023a], which are widely used in diffusion models. This shows that discrete\\nrepresentation in the image tokenizer is no longer the bottleneck of the image reconstruction.\\n3.2 Class-conditional Image Generation\\nTraining setup. Our benchmark is the popular 256 \u00d7256 ImageNet. All models are trained with\\nthe similar settings: base learning rate of 10\u22124per 256 batch size, AdamW optimizer with \u03b21= 0.9,\\n\u03b22= 0.95,weight decay = 0.05, gradient clipping of 1.0. The dropout is always 0.1 for input\\ntoken embedding, attention module and FFN module. The class condition embedding dropout for\\nclassifier-free guidance is 0.1.\\nPrecomputing image codes. To accelerate the model training, we use the image tokenizer to precom-\\npute image codes before training. To achieve the similar effect of random crop data augmentation,\\nwe extract image codes of ten crops of the original image. During training, we randomly select one\\ncopy code from the ten augmentations.\\nEvaluation metrics. We use Fr\u00e9chet inception distance (FID) [Heusel et al. 2017] as the main\\nmetric. We also report Inception Score (IS) [Salimans et al. 2016], sFID [Nash et al. 2021] and\\nPrecision/Recall [Kynk\u00e4\u00e4nniemi et al. 2019] as secondary metrics. All evaluations are implemented\\nusing ADM\u2019s TensorFlow scripts [Dhariwal & Nichol 2021] for fair comparisons.\\nEffect of image tokens. Although increasing the image tokens brings better image reconstruction\\nquality, it is not strongly correlated to image generation quality. As shown in Table 5, when the model\\nparameter is smaller than 1B, 256 (16 \u00d716) tokens bring better image generation performance than\\n576 (24 \u00d724). This shows the synergistic effect of scaling up model parameters and token numbers.\\nNevertheless, fewer image tokens would limit the image generation performance, for example, 256\\n(16\u00d716) tokens limit the FID at 3.06 FID, while 576 (24 \u00d724) could further improve the FID to a\\nlower value.\\n6\\n\\n=== Page 7 ===\\nimage token model FID\u2193 IS\u2191 Precision \u2191Recall\u2191\\nimage size: 256 \u00d7256\\ntokens: 256 (16 \u00d716)\\nrFID: 2.19B 8.69 124.43 0.78 0.46\\nL 4.21 200.00 0.82 0.50\\nXL 3.39 227.08 0.81 0.54\\nXXL 3.09 253.60 0.82 0.52\\n3B 3.06 279.71 0.84 0.53\\nimage size: 384 \u00d7384\\ntokens: 576 (24 \u00d724)\\nrFID: 0.94B 12.89 92.44 0.73 0.48\\nL 5.01 167.31 0.78 0.52\\nXL 3.42 202.93 0.79 0.56\\nXXL 2.89 236.21 0.80 0.56\\n3B 2.61 251.90 0.80 0.56\\nTable 5: The effect of image tokens on image generation. The generated image is always resized to\\n256\u00d7256 when evaluating on ImageNet benchmark. We compare all models after training 50 epochs.\\nThe inference setting is cfg = 1.75, top-k = 0 (all), top-p = 1.0, temperature = 1.0 for all experiments.\\n(a) without classifier-free guidance\\n (b) with classifier-free guidance\\nFigure 2: Scaling model size. We show FID of 256 \u00d7256 ImageNet benchmark over training epochs.\\nScaling model size brings consistent improvement on FID during the whole training process. More\\ndetailed evaluation metrics are in Appendix.\\n(a) classifier-free guidance\\n (b) top-k sampling\\nFigure 3: The effect of sampling configuration. We show FID and Inception Score of 256 \u00d7256\\nImageNet benchmark over different sampling configurations. The model is LlamaGen-L, and the\\ndefault setting is cfg = 2.0, top-k = 0 (all), top-p = 1.0, temperature = 1.0.\\nEffect of model size. We train our models across five model sizes (B, L, XL, XXL, 3B) and evaluate\\ntheir performance with and without classifier-free guidance. Figure 2 illustrates how FID changes as\\nboth the model sizes and the training epochs increase. Notable improvements in FID are observed\\nwhen scaling the model from LlamaGen-B to LlamaGen-XXL. Further scaling to 3B yields only\\nmarginal improvements. A plausible explanation for this phenomenon could be the limitation in\\ndataset size: ImageNet [Deng et al. 2009] comprises approximately only 1 million images, expanding\\nthe dataset or using stronger data augmentation could potentially lead to further improvements.\\n7\\n\\n=== Page 8 ===\\nType Model #Para. FID\u2193 IS\u2191 Precision \u2191Recall\u2191\\nGANBigGAN [Brock et al. 2018] 112M 6.95 224.5 0.89 0.38\\nGigaGAN [Kang et al. 2023] 569M 3.45 225.5 0.84 0.61\\nStyleGan-XL [Sauer et al. 2022] 166M 2.30 265.1 0.78 0.53\\nDiffusionADM [Dhariwal & Nichol 2021] 554M 10.94 101.0 0.69 0.63\\nCDM [Ho et al. 2022b] \u2212 4.88 158.7 \u2212 \u2212\\nLDM-4 [Rombach et al. 2022] 400M 3.60 247.7 \u2212 \u2212\\nDiT-XL/2 [Peebles & Xie 2023] 675M 2.27 278.2 0.83 0.57\\nMask.MaskGIT [Chang et al. 2022] 227M 6.18 182.1 0.80 0.51\\nMaskGIT-re [Chang et al. 2022] 227M 4.02 355.6 \u2212 \u2212\\nARVQGAN [Esser et al. 2021] 227M 18.65 80.4 0.78 0.26\\nVQGAN [Esser et al. 2021] 1.4B 15.78 74.3 \u2212 \u2212\\nVQGAN-re [Esser et al. 2021] 1.4B 5.20 280.3 \u2212 \u2212\\nViT-VQGAN [Yu et al. 2021] 1.7B 4.17 175.1 \u2212 \u2212\\nViT-VQGAN-re [Yu et al. 2021] 1.7B 3.04 227.4 \u2212 \u2212\\nRQTran. [Lee et al. 2022] 3.8B 7.55 134.0 \u2212 \u2212\\nRQTran.-re [Lee et al. 2022] 3.8B 3.80 323.7 \u2212 \u2212\\nARLlamaGen-B (cfg=2.00) 111M 5.46 193.61 0.83 0.45\\nLlamaGen-L (cfg=2.00) 343M 3.07 256.06 0.83 0.52\\nLlamaGen-XL (cfg=1.75) 775M 2.62 244.08 0.80 0.57\\nLlamaGen-XXL (cfg=1.75) 1.4B 2.34 253.90 0.80 0.59\\nLlamaGen-3B (cfg=1.65) 3.1B 2.18 263.33 0.81 0.58\\nLlamaGen-3B (cfg=1.75) 3.1B 2.32 280.10 0.82 0.56\\nLlamaGen-3B (cfg=2.00) 3.1B 2.81 311.59 0.84 0.54\\nTable 6: Model comparisons on class-conditional ImageNet 256 \u00d7256 benchmark . Metrics include\\nFr\u00e9chet inception distance (FID), inception score (IS), precision and recall. \u201c \u2193\u201d or \u201c\u2191\u201d indicate lower\\nor higher values are better. \u201c-re\u201d means using rejection sampling. \u201ccfg\u201d means using classifier-free\\nguidance. More detailed results are in Appendix.\\nEffect of classifier-free guidance (CFG). First, as shown in Figure 2, using classifier-free guidance\\ncan significantly enhance the visual quality across all model sizes. Moreover, Figure 3a illustrates\\nthat the model achieves optimal FID at CFG = 2.0 and further increasing CFG would deteriorate FID,\\nwhich is consistent with previous findings [Dhariwal & Nichol 2021]. Additionally, the increment in\\nCFG results in a trade-off between diversity and fidelity, as evidenced by increased precision and\\ndecreased recall, demonstrated in Table 10.\\nEffect of top-k sampling. As shown in Figure 3b, a small top-k value is not beneficial for FID\\nand IS. Increasing top-k continuously improves FID but decreases IS, which trades off fidelity for\\ndiversity. We observe a similar trend when changing the parameter of top-p and temperature in\\nsampling. Since FID is our main metric, we use maximum value as the default top-k value, which is\\nthe whole codebook size.\\nComparisons with other image generation methods. In Table 6, we compare with popular image\\ngeneration models, including GAN [Brock et al. 2018; Kang et al. 2023; Sauer et al. 2022], Diffusion\\nmodels [Dhariwal & Nichol 2021; Ho et al. 2022b; Rombach et al. 2022; Peebles & Xie 2023],\\nand masked-prediction models [Chang et al. 2022]. Our models exhibit competitive performance\\nin all metrics of FID, IS, Precision and Recall. Notably, our 3B model outperforms the popular\\ndiffusion models LDM [Rombach et al. 2022], DiT [Peebles & Xie 2023]. This shows that vanilla\\nautoregressive models can serve as the basis of advanced image generation systems.\\nWhen comparing with autoregressive models [Esser et al. 2021; Yu et al. 2021; Lee et al. 2022], our\\nmodel outperforms all previous models at different levels of model parameters. This benefits from\\nbetter designs of image tokenizers and better scalability of image generation models. We hope our\\nsimple and effective implementation will serve as a solid baseline and help facilitate future research\\nin autoregressive models for image generations.\\n8\",\"annotations\":null}", "tool_call_id": "toolu_01MHpK7CXWZUcb3hhGNCgKwB"}, {"role": "assistant", "content": "Perfect! Now I have the detailed information from both papers. Let me search for more information about model parameters and check if there are any other relevant details I might have missed.", "tool_calls": [{"id": "toolu_015xnGzaUkHMpVhG6P7YmGM9", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"start_page\": 4, \"end_page\": 6}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 25\\nExtracted page range: 4-6\\n\\n=== Page 4 ===\\nClassi\ufb01er-free guidance. Conditional diffusion models\\ntake extra information as input, such as a class label c.\\nIn this case, the reverse process becomes p\\u0012(xt\\u00001jxt;c),\\nwhere\\u000f\\u0012and\\u0006\\u0012are conditioned on c. In this setting,\\nclassi\ufb01er-free guidance can be used to encourage the sam-\\npling procedure to \ufb01nd xsuch that logp(cjx)is high [21].\\nBy Bayes Rule, logp(cjx)/logp(xjc)\\u0000logp(x), and\\nhencerxlogp(cjx)/rxlogp(xjc)\\u0000rxlogp(x). By in-\\nterpreting the output of diffusion models as the score func-\\ntion, the DDPM sampling procedure can be guided to sam-\\nplexwith highp(xjc)by:^\\u000f\\u0012(xt;c) =\\u000f\\u0012(xt;;) +s\\u0001\\nrxlogp(xjc)/\\u000f\\u0012(xt;;)+s\\u0001(\\u000f\\u0012(xt;c)\\u0000\\u000f\\u0012(xt;;)), where\\ns>1indicates the scale of the guidance (note that s= 1re-\\ncovers standard sampling). Evaluating the diffusion model\\nwithc=;is done by randomly dropping out cduring\\ntraining and replacing it with a learned \u201cnull\u201d embedding\\n;. Classi\ufb01er-free guidance is widely-known to yield sig-\\nni\ufb01cantly improved samples over generic sampling tech-\\nniques [21, 35, 46], and the trend holds for our DiT models.\\nLatent diffusion models. Training diffusion models di-\\nrectly in high-resolution pixel space can be computationally\\nprohibitive. Latent diffusion models (LDMs) [48] tackle this\\nissue with a two-stage approach: (1) learn an autoencoder\\nthat compresses images into smaller spatial representations\\nwith a learned encoder E; (2) train a diffusion model of\\nrepresentations z=E(x)instead of a diffusion model of\\nimagesx(Eis frozen). New images can then be generated\\nby sampling a representation zfrom the diffusion model\\nand subsequently decoding it to an image with the learned\\ndecoderx=D(z).\\nAs shown in Figure 2, LDMs achieve good performance\\nwhile using a fraction of the G\ufb02ops of pixel space diffusion\\nmodels like ADM. Since we are concerned with compute\\nef\ufb01ciency, this makes them an appealing starting point for\\narchitecture exploration. In this paper, we apply DiTs to\\nlatent space, although they could be applied to pixel space\\nwithout modi\ufb01cation as well. This makes our image genera-\\ntion pipeline a hybrid-based approach; we use off-the-shelf\\nconvolutional V AEs and transformer-based DDPMs.\\n3.2. Diffusion Transformer Design Space\\nWe introduce Diffusion Transformers (DiTs), a new ar-\\nchitecture for diffusion models. We aim to be as faithful to\\nthe standard transformer architecture as possible to retain\\nits scaling properties. Since our focus is training DDPMs of\\nimages (speci\ufb01cally, spatial representations of images), DiT\\nis based on the Vision Transformer (ViT) architecture which\\noperates on sequences of patches [10]. DiT retains many of\\nthe best practices of ViTs. Figure 3 shows an overview of\\nthe complete DiT architecture. In this section, we describe\\nthe forward pass of DiT, as well as the components of the\\ndesign space of the DiT class.\\n\ud835\udc5d\ud835\udc3c\ud835\udc5d\ud835\udc3c\ud835\udc47=\ud835\udc3c/\ud835\udc5d!Noised LatentI\u00d7I\u00d7CInput Tokens T\u00d7dDiTBlockFigure 4. Input speci\ufb01cations for DiT. Given patch size p\\u0002p,\\na spatial representation (the noised latent from the V AE) of shape\\nI\\u0002I\\u0002Cis \u201cpatchi\ufb01ed\u201d into a sequence of length T= (I=p)2\\nwith hidden dimension d. A smaller patch size presults in a longer\\nsequence length and thus more G\ufb02ops.\\nPatchify. The input to DiT is a spatial representation z\\n(for256\\u0002256\\u00023images,zhas shape 32\\u000232\\u00024). The\\n\ufb01rst layer of DiT is \u201cpatchify,\u201d which converts the spatial\\ninput into a sequence of Ttokens, each of dimension d,\\nby linearly embedding each patch in the input. Following\\npatchify, we apply standard ViT frequency-based positional\\nembeddings (the sine-cosine version) to all input tokens.\\nThe number of tokens Tcreated by patchify is determined\\nby the patch size hyperparameter p. As shown in Figure 4,\\nhalvingpwill quadruple T, and thus at least quadruple total\\ntransformer G\ufb02ops. Although it has a signi\ufb01cant impact on\\nG\ufb02ops, note that changing phas no meaningful impact on\\ndownstream parameter counts.\\nWe addp= 2;4;8to the DiT design space.\\nDiT block design. Following patchify, the input tokens\\nare processed by a sequence of transformer blocks. In ad-\\ndition to noised image inputs, diffusion models sometimes\\nprocess additional conditional information such as noise\\ntimestepst, class labels c, natural language, etc. We explore\\nfour variants of transformer blocks that process conditional\\ninputs differently. The designs introduce small, but impor-\\ntant, modi\ufb01cations to the standard ViT block design. The\\ndesigns of all blocks are shown in Figure 3.\\n\u2013In-context conditioning. We simply append the vec-\\ntor embeddings of tandcas two additional tokens in\\nthe input sequence, treating them no differently from\\nthe image tokens. This is similar to cls tokens in\\nViTs, and it allows us to use standard ViT blocks with-\\nout modi\ufb01cation. After the \ufb01nal block, we remove the\\nconditioning tokens from the sequence. This approach\\nintroduces negligible new G\ufb02ops to the model.\\n4\\n\\n=== Page 5 ===\\n100K 200K 300K 400K\\nTraining Steps20406080100FID-50K\\nXL/2 In-Context\\nXL/2 Cross-Attention\\nXL/2 adaLN\\nXL/2 adaLN-ZeroFigure 5. Comparing different conditioning strategies. adaLN-\\nZero outperforms cross-attention and in-context conditioning at all\\nstages of training.\\n\u2013Cross-attention block. We concatenate the embeddings\\noftandcinto a length-two sequence, separate from\\nthe image token sequence. The transformer block is\\nmodi\ufb01ed to include an additional multi-head cross-\\nattention layer following the multi-head self-attention\\nblock, similar to the original design from Vaswani et\\nal.[60], and also similar to the one used by LDM for\\nconditioning on class labels. Cross-attention adds the\\nmost G\ufb02ops to the model, roughly a 15% overhead.\\n\u2013Adaptive layer norm (adaLN) block. Following\\nthe widespread usage of adaptive normalization lay-\\ners [40] in GANs [2, 28] and diffusion models with U-\\nNet backbones [9], we explore replacing standard layer\\nnorm layers in transformer blocks with adaptive layer\\nnorm (adaLN). Rather than directly learn dimension-\\nwise scale and shift parameters \\rand\\f, we regress\\nthem from the sum of the embedding vectors of tand\\nc. Of the three block designs we explore, adaLN adds\\nthe least G\ufb02ops and is thus the most compute-ef\ufb01cient.\\nIt is also the only conditioning mechanism that is re-\\nstricted to apply the same function to all tokens.\\n\u2013adaLN-Zero block. Prior work on ResNets has found\\nthat initializing each residual block as the identity\\nfunction is bene\ufb01cial. For example, Goyal et al. found\\nthat zero-initializing the \ufb01nal batch norm scale factor \\r\\nin each block accelerates large-scale training in the su-\\npervised learning setting [13]. Diffusion U-Net mod-\\nels use a similar initialization strategy, zero-initializing\\nthe \ufb01nal convolutional layer in each block prior to any\\nresidual connections. We explore a modi\ufb01cation of\\nthe adaLN DiT block which does the same. In addi-\\ntion to regressing \\rand\\f, we also regress dimension-\\nwise scaling parameters \\u000bthat are applied immediately\\nprior to any residual connections within the DiT block.Model Layers N Hidden size dHeads G\ufb02ops (I=32,p=4)\\nDiT-S 12 384 6 1.4\\nDiT-B 12 768 12 5.6\\nDiT-L 24 1024 16 19.7\\nDiT-XL 28 1152 16 29.1\\nTable 1. Details of DiT models. We follow ViT [10] model con-\\n\ufb01gurations for the Small (S), Base (B) and Large (L) variants; we\\nalso introduce an XLarge (XL) con\ufb01g as our largest model.\\nWe initialize the MLP to output the zero-vector for all\\n\\u000b; this initializes the full DiT block as the identity\\nfunction. As with the vanilla adaLN block, adaLN-\\nZero adds negligible G\ufb02ops to the model.\\nWe include the in-context, cross-attention, adaptive layer\\nnorm and adaLN-Zero blocks in the DiT design space.\\nModel size. We apply a sequence of NDiT blocks, each\\noperating at the hidden dimension size d. Following ViT,\\nwe use standard transformer con\ufb01gs that jointly scale N,\\ndand attention heads [10, 63]. Speci\ufb01cally, we use four\\ncon\ufb01gs: DiT-S, DiT-B, DiT-L and DiT-XL. They cover a\\nwide range of model sizes and \ufb02op allocations, from 0.3\\nto 118.6 G\ufb02ops, allowing us to gauge scaling performance.\\nTable 1 gives details of the con\ufb01gs.\\nWe add B, S, L and XL con\ufb01gs to the DiT design space.\\nTransformer decoder. After the \ufb01nal DiT block, we need\\nto decode our sequence of image tokens into an output noise\\nprediction and an output diagonal covariance prediction.\\nBoth of these outputs have shape equal to the original spa-\\ntial input. We use a standard linear decoder to do this; we\\napply the \ufb01nal layer norm (adaptive if using adaLN) and lin-\\nearly decode each token into a p\\u0002p\\u00022Ctensor, where Cis\\nthe number of channels in the spatial input to DiT. Finally,\\nwe rearrange the decoded tokens into their original spatial\\nlayout to get the predicted noise and covariance.\\nThe complete DiT design space we explore is patch size,\\ntransformer block architecture and model size.\\n4. Experimental Setup\\nWe explore the DiT design space and study the scaling\\nproperties of our model class. Our models are named ac-\\ncording to their con\ufb01gs and latent patch sizes p; for exam-\\nple, DiT-XL/2 refers to the XLarge con\ufb01g and p= 2.\\nTraining. We train class-conditional latent DiT models at\\n256\\u0002256 and512\\u0002512 image resolution on the Ima-\\ngeNet dataset [31], a highly-competitive generative mod-\\neling benchmark. We initialize the \ufb01nal linear layer with\\nzeros and otherwise use standard weight initialization tech-\\nniques from ViT. We train all models with AdamW [29,33].\\n5\\n\\n=== Page 6 ===\\nFigure 6. Scaling the DiT model improves FID at all stages of training. We show FID-50K over training iterations for 12 of our DiT\\nmodels. Top row: We compare FID holding patch size constant. Bottom row: We compare FID holding model size constant. Scaling the\\ntransformer backbone yields better generative models across all model sizes and patch sizes.\\nWe use a constant learning rate of 1\\u000210\\u00004, no weight de-\\ncay and a batch size of 256. The only data augmentation\\nwe use is horizontal \ufb02ips. Unlike much prior work with\\nViTs [57, 61], we did not \ufb01nd learning rate warmup nor\\nregularization necessary to train DiTs to high performance.\\nEven without these techniques, training was highly stable\\nacross all model con\ufb01gs and we did not observe any loss\\nspikes commonly seen when training transformers. Follow-\\ning common practice in the generative modeling literature,\\nwe maintain an exponential moving average (EMA) of DiT\\nweights over training with a decay of 0.9999. All results\\nreported use the EMA model. We use identical training hy-\\nperparameters across all DiT model sizes and patch sizes.\\nOur training hyperparameters are almost entirely retained\\nfrom ADM. We did not tune learning rates, decay/warm-up\\nschedules, Adam \\f1/\\f2or weight decays.\\nDiffusion. We use an off-the-shelf pre-trained variational\\nautoencoder (V AE) model [30] from Stable Diffusion [48].\\nThe V AE encoder has a downsample factor of 8\u2014given an\\nRGB image xwith shape 256\\u0002256\\u00023,z=E(x)has\\nshape 32\\u000232\\u00024. Across all experiments in this section,\\nour diffusion models operate in this Z-space. After sam-\\npling a new latent from our diffusion model, we decode it\\nto pixels using the V AE decoder x=D(z). We retain diffu-\\nsion hyperparameters from ADM [9]; speci\ufb01cally, we use a\\ntmax= 1000 linear variance schedule ranging from 1\\u000210\\u00004\\nto2\\u000210\\u00002, ADM\u2019s parameterization of the covariance \\u0006\\u0012\\nand their method for embedding input timesteps and labels.\\nEvaluation metrics. We measure scaling performance\\nwith Fr \u00b4echet Inception Distance (FID) [18], the standard\\nmetric for evaluating generative models of images.We follow convention when comparing against prior works\\nand report FID-50K using 250 DDPM sampling steps.\\nFID is known to be sensitive to small implementation de-\\ntails [37]; to ensure accurate comparisons, all values re-\\nported in this paper are obtained by exporting samples and\\nusing ADM\u2019s TensorFlow evaluation suite [9]. FID num-\\nbers reported in this section do notuse classi\ufb01er-free guid-\\nance except where otherwise stated. We additionally report\\nInception Score [51], sFID [34] and Precision/Recall [32]\\nas secondary metrics.\\nCompute. We implement all models in JAX [1] and train\\nthem using TPU-v3 pods. DiT-XL/2, our most compute-\\nintensive model, trains at roughly 5.7 iterations/second on a\\nTPU v3-256 pod with a global batch size of 256.\\n5. Experiments\\nDiT block design. We train four of our highest G\ufb02op\\nDiT-XL/2 models, each using a different block design\u2014\\nin-context (119.4 G\ufb02ops), cross-attention (137.6 G\ufb02ops),\\nadaptive layer norm (adaLN, 118.6 G\ufb02ops) or adaLN-zero\\n(118.6 G\ufb02ops). We measure FID over the course of training.\\nFigure 5 shows the results. The adaLN-Zero block yields\\nlower FID than both cross-attention and in-context condi-\\ntioning while being the most compute-ef\ufb01cient. At 400K\\ntraining iterations, the FID achieved with the adaLN-Zero\\nmodel is nearly half that of the in-context model, demon-\\nstrating that the conditioning mechanism critically affects\\nmodel quality. Initialization is also important\u2014adaLN-\\nZero, which initializes each DiT block as the identity func-\\ntion, signi\ufb01cantly outperforms vanilla adaLN. For the rest\\nof the paper, all models will use adaLN-Zero DiT blocks.\\n6\",\"annotations\":null}", "tool_call_id": "toolu_015xnGzaUkHMpVhG6P7YmGM9"}, {"role": "assistant", "content": "Now let me check the appendix or other sections to find the exact parameter count for DiT-XL/2:", "tool_calls": [{"id": "toolu_01KcwPNjdVyvtcpNqT7VWJMK", "type": "function", "function": {"name": "pdf-tools-search_pdf_content", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"pattern\": \"XL/2.*parameter|parameter.*XL/2|675M|558M\", \"page_size\": 20}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"No matches found for pattern: XL/2.*parameter|parameter.*XL/2|675M|558M\",\"annotations\":null}", "tool_call_id": "toolu_01KcwPNjdVyvtcpNqT7VWJMK"}, {"role": "assistant", "content": null, "tool_calls": [{"id": "toolu_01UFbMr1h8Y4CaFuk2taKFZ7", "type": "function", "function": {"name": "pdf-tools-read_pdf_pages", "arguments": "{\"pdf_file_path\": \"/workspace/dumps/workspace/2212.09748v2.pdf\", \"start_page\": 12, \"end_page\": 14}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 25\\nExtracted page range: 12-14\\n\\n=== Page 12 ===\\nFigure 11. Additional selected samples from our 512 \\u0002512 and 256\\u0002256 resolution DiT-XL/2 models. We use a classi\ufb01er-free guidance\\nscale of 6.0 for the 512\\u0002512model and 4.0 for the 256\\u0002256model. Both models use the ft-EMA V AE decoder.\\nA. Additional Implementation Details\\nWe include detailed information about all of our DiT\\nmodels in Table 4, including both 256\\u0002256and512\\u0002512\\nmodels. In Figure 13, we report DiT training loss curves.\\nFinally, we also include G\ufb02op counts for DDPM U-Net\\nmodels from ADM and LDM in Table 6.\\nDiT model details. To embed input timesteps, we use\\na 256-dimensional frequency embedding [9] followed by\\na two-layer MLP with dimensionality equal to the trans-\\nformer\u2019s hidden size and SiLU activations. Each adaLN\\nlayer feeds the sum of the timestep and class embeddings\\ninto a SiLU nonlinearity and a linear layer with output neu-\\nrons equal to either 4\\u0002(adaLN) or 6\\u0002(adaLN-Zero) the\\ntransformer\u2019s hidden size. We use GELU nonlinearities (ap-\\nproximated with tanh) in the core transformer [16].\\nClassi\ufb01er-free guidance on a subset of channels. In our\\nexperiments using classi\ufb01er-free guidance, we applied guid-\\nance only to the \ufb01rst three channels of the latents instead of\\nall four channels. Upon investigating, we found that three-\\nchannel guidance and four-channel guidance give similarresults (in terms of FID) when simply adjusting the scale\\nfactor. Speci\ufb01cally, three-channel guidance with a scale\\nof(1 +x)appears reasonably well-approximated by four-\\nchannel guidance with a scale of (1 +3\\n4x)(e.g., three-\\nchannel guidance with a scale of 1:5gives an FID-50K of\\n2.27, and four-channel guidance with a scale of 1:375gives\\nan FID-50K of 2.20). It is somewhat interesting that ap-\\nplying guidance to a subset of elements can still yield good\\nperformance, and we leave it to future work to explore this\\nphenomenon further.\\nB. Model Samples\\nWe show samples from our two DiT-XL/2 models at\\n512\\u0002512and256\\u0002256resolution trained for 3M and 7M\\nsteps, respectively. Figures 1 and 11 show selected samples\\nfrom both models. Figures 14 through 33 show uncurated\\nsamples from the two models across a range of classi\ufb01er-\\nfree guidance scales and input class labels (generated with\\n250 DDPM sampling steps and the ft-EMA V AE decoder).\\nAs with prior work using guidance, we observe that larger\\nscales increase visual \ufb01delity and decrease sample diversity.\\n12\\n\\n=== Page 13 ===\\nModel Image Resolution Flops (G) Params (M) Training Steps (K) Batch Size Learning Rate DiT Block FID-50K (no guidance)\\nDiT-S/8 256\\u0002256 0.36 33 400 256 1\\u000210\\u00004adaLN-Zero 153.60\\nDiT-S/4 256\\u0002256 1.41 33 400 256 1\\u000210\\u00004adaLN-Zero 100.41\\nDiT-S/2 256\\u0002256 6.06 33 400 256 1\\u000210\\u00004adaLN-Zero 68.40\\nDiT-B/8 256\\u0002256 1.42 131 400 256 1\\u000210\\u00004adaLN-Zero 122.74\\nDiT-B/4 256\\u0002256 5.56 130 400 256 1\\u000210\\u00004adaLN-Zero 68.38\\nDiT-B/2 256\\u0002256 23.01 130 400 256 1\\u000210\\u00004adaLN-Zero 43.47\\nDiT-L/8 256\\u0002256 5.01 459 400 256 1\\u000210\\u00004adaLN-Zero 118.87\\nDiT-L/4 256\\u0002256 19.70 458 400 256 1\\u000210\\u00004adaLN-Zero 45.64\\nDiT-L/2 256\\u0002256 80.71 458 400 256 1\\u000210\\u00004adaLN-Zero 23.33\\nDiT-XL/8 256\\u0002256 7.39 676 400 256 1\\u000210\\u00004adaLN-Zero 106.41\\nDiT-XL/4 256\\u0002256 29.05 675 400 256 1\\u000210\\u00004adaLN-Zero 43.01\\nDiT-XL/2 256\\u0002256 118.64 675 400 256 1\\u000210\\u00004adaLN-Zero 19.47\\nDiT-XL/2 256\\u0002256 119.37 449 400 256 1\\u000210\\u00004in-context 35.24\\nDiT-XL/2 256\\u0002256 137.62 598 400 256 1\\u000210\\u00004cross-attention 26.14\\nDiT-XL/2 256\\u0002256 118.56 600 400 256 1\\u000210\\u00004adaLN 25.21\\nDiT-XL/2 256\\u0002256 118.64 675 2352 256 1\\u000210\\u00004adaLN-Zero 10.67\\nDiT-XL/2 256\\u0002256 118.64 675 7000 256 1\\u000210\\u00004adaLN-Zero 9.62\\nDiT-XL/2 512\\u0002512 524.60 675 1301 256 1\\u000210\\u00004adaLN-Zero 13.78\\nDiT-XL/2 512\\u0002512 524.60 675 3000 256 1\\u000210\\u00004adaLN-Zero 11.93\\nTable 4. Details of all DiT models. We report detailed information about every DiT model in our paper. Note that FID-50K here is\\ncomputed without classi\ufb01er-free guidance. Parameter and \ufb02op counts exclude the V AE model which contains 84M parameters across the\\nencoder and decoder. For both the 256\\u0002256and512\\u0002512DiT-XL/2 models, we never observed FID saturate and continued training\\nthem as long as possible. Numbers reported in this table use the ft-MSE V AE decoder.\\nC. Additional Scaling Results\\nImpact of scaling on metrics beyond FID. In Figure 12,\\nwe show the effects of DiT scale on a suite of evaluation\\nmetrics\u2014FID, sFID, Inception Score, Precision and Recall.\\nWe \ufb01nd that our FID-driven analysis in the main paper gen-\\neralizes to the other metrics\u2014across every metric, scaled-up\\nDiT models are more compute-ef\ufb01cient and model G\ufb02ops\\nare highly-correlated with performance. In particular, In-\\nception Score and Precision bene\ufb01t heavily from increased\\nmodel scale.\\nImpact of scaling on training loss. We also examine the\\nimpact of scale on training loss in Figure 13. Increasing\\nDiT model G\ufb02ops (via transformer size or number of input\\ntokens) causes the training loss to decrease more rapidly and\\nsaturate at a lower value. This phenomenon is consistent\\nwith trends observed with language models, where scaled-\\nup transformers demonstrate both improved loss curves as\\nwell as improved performance on downstream evaluation\\nsuites [26].\\nD. V AE Decoder Ablations\\nWe used off-the-shelf, pre-trained V AEs across our ex-\\nperiments. The V AE models (ft-MSE and ft-EMA) are \ufb01ne-\\ntuned versions of the original LDM \u201cf8\u201d model (only the\\ndecoder weights are \ufb01ne-tuned). We monitored metrics for\\nour scaling analysis in Section 5 using the ft-MSE decoder,\\nand we used the ft-EMA decoder for our \ufb01nal metrics re-\\nported in Tables 2 and 3. In this section, we ablate threeClass-Conditional ImageNet 256 \\u0002256, DiT-XL/2-G (cfg=1.5)\\nDecoder FID#sFID# IS\\\" Precision\\\" Recall\\\"\\noriginal 2.46 5.18 271.56 0.82 0.57\\nft-MSE 2.30 4.73 276.09 0.83 0.57\\nft-EMA 2.27 4.60 278.24 0.83 0.57\\nTable 5. Decoder ablation. We tested different pre-trained V AE\\ndecoder weights available at https://huggingface.co/\\nstabilityai/sd-vae-ft-mse . Different pre-trained de-\\ncoder weights yield comparable results on ImageNet 256\\u0002256.\\nDiffusion U-Net Model Complexities\\nModel Image Resolution Base Flops (G) Upsampler Flops (G) Total Flops (G)\\nADM 128\\u0002128 307 - 307\\nADM 256\\u0002256 1120 - 1120\\nADM 512\\u0002512 1983 - 1983\\nADM-U 256\\u0002256 110 632 742\\nADM-U 512\\u0002512 307 2506 2813\\nLDM-4 256\\u0002256 104 - 104\\nLDM-8 256\\u0002256 57 - 57\\nTable 6. G\ufb02op counts for baseline diffusion models that use U-\\nNet backbones. Note that we only count Flops for DDPM com-\\nponents.\\ndifferent choices of the V AE decoder; the original one used\\nby LDM and the two \ufb01ne-tuned decoders used by Stable\\nDiffusion. Because the encoders are identical across mod-\\nels, the decoders can be swapped-in without retraining the\\ndiffusion model. Table 5 shows results; XL/2 continues to\\noutperform all prior diffusion models when using the LDM\\ndecoder.\\n13\\n\\n=== Page 14 ===\\nFigure 12. DiT scaling behavior on several generative modeling metrics. Left: We plot model performance as a function of total training\\ncompute for FID, sFID, Inception Score, Precision and Recall. Right: We plot model performance at 400K training steps for all 12 DiT\\nvariants against transformer G\ufb02ops, \ufb01nding strong correlations across metrics. All values were computed using the ft-MSE V AE decoder.\\n14\",\"annotations\":null}", "tool_call_id": "toolu_01UFbMr1h8Y4CaFuk2taKFZ7"}, {"role": "assistant", "content": "Perfect! Now I have all the information I need. Let me compile the data:\n\nFrom the papers:\n1. **DiT-XL/2** (2212.09748v2.pdf):\n   - Model: DiT-XL/2\n   - Category: Diffusion\n   - Parameters: 675M\n   - FID-50K: 2.27 (with cfg=1.50)\n   - Inception Score: 278.24\n\n2. **LlamaGen-3B** (2406.06525v1.pdf):\n   - Model: LlamaGen-3B\n   - Category: AR (Autoregressive)\n   - Parameters: 3.1B\n   - FID: 2.18 (with cfg=1.65)\n   - Inception Score: 263.33\n\nNow let me create the LaTeX table in the format specified, ordered by FID in descending order (worst FID first):", "tool_calls": [{"id": "toolu_01KvqCynGjqHrZWfjciukGUU", "type": "function", "function": {"name": "filesystem-write_file", "arguments": "{\"path\": \"/workspace/dumps/workspace/survey.tex\", \"content\": \"\\\\begin{table}[!ht]\\n    \\\\centering\\n    \\\\begin{tabular}{ccccc}\\n        \\\\toprule\\n        Model & Class & \\\\#Param & FID-50K & Inception Score \\\\\\\\\\n        \\\\midrule\\n        DiT-XL/2 & Diffusion & 675M & 2.27 & 278.24 \\\\\\\\\\n        LlamaGen-3B & AR & 3.1B & 2.18 & 263.33 \\\\\\\\\\n        \\\\bottomrule\\n    \\\\end{tabular}\\n\\\\end{table}\"}"}}]}, {"role": "tool", "content": "{\"type\":\"text\",\"text\":\"Successfully wrote to /workspace/dumps/workspace/survey.tex\",\"annotations\":null}", "tool_call_id": "toolu_01KvqCynGjqHrZWfjciukGUU"}, {"role": "assistant", "content": "Perfect! I've successfully created the LaTeX table with the experimental results from both papers on ImageNet 256\u00d7256. Here's a summary of what I found:\n\n## Summary\n\nI analyzed two papers in your workspace:\n\n1. **DiT (Diffusion Transformers)** - Paper ID: 2212.09748v2\n   - Best model: DiT-XL/2\n   - Method: Diffusion model with transformer backbone\n   - Parameters: 675M\n   - FID-50K: 2.27 (with classifier-free guidance scale 1.50)\n   - Inception Score: 278.24\n\n2. **LlamaGen** - Paper ID: 2406.06525v1\n   - Best model: LlamaGen-3B\n   - Method: Autoregressive (AR) model based on Llama architecture\n   - Parameters: 3.1B\n   - FID: 2.18 (with classifier-free guidance scale 1.65)\n   - Inception Score: 263.33\n\nThe table has been saved to `survey.tex` in your workspace, ordered by FID in descending order (DiT-XL/2 with 2.27 FID first, then LlamaGen-3B with 2.18 FID). The table follows the format structure you provided in `format.tex`."}]}